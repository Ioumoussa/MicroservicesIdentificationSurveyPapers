DOI,PMID,arXiv ID,Title,Abstract,Authors,Journal,Year
10.13052/jwe1540-9589.2158,,,Microservices Identification in Monolith Systems: Functionality Redesign Complexity and Evaluation of Similarity Measures,"As monolithic applications grow in size and complexity, they tend to show symptoms of monolithic hell, such as scalability and maintainability problems. To help suppressing these problems, the microservices architectural style is applied. However, identifying the services within the monolith is not an easy task, and current research approaches emphasize different qualities of microservices. In this paper we present an approach for the automatic identification of microservices, which minimizes the cost of the monolith’s functionalities redesign. The decompositions are generated based on similarity measures between the persistent domain entities of the monolith. An extensive analysis of the decompositions generated for 121 monolith systems is done. As result of the analysis we conclude that there is not a similarity measure, neither a combination of similarity measures, that provides better decomposition results in terms of complexity associated with the functionalities migration. However, we prove that it is possible to follow an incremental migration process of monoliths. Additionally, we conclude that there is a positive correlation between coupling and complexity, and that it is not possible to conclude on the existence of a correlation between cohesion and complexity.","Samuel Santos,António Rito Silva",Journal of Web Engineering,2022
10.1109/seai55746.2022.9832106,,,A Microservices Identification Approach based on Problem Frames,"As software grows in size continuously, traditional monolithic architecture is difficult to upgrade and update. As a more flexible architecture, microservices consist of smaller pieces or services that are loosely coupled and can be deployed independently. More and more IT companies are adopting microservices architecture. However, migrating to microservices is still a big challenge due to the lack of a more systematic methodology on microservices identification. Most existing studies on microservices identification are mainly based on refactoring the system module rather than considering the actual functional requirements. Therefore, we propose a microservices identification approach based on the problem frames to address this challenge, which considers real-world requirements. It relies on the merging process with the problem diagram, where the problem domain is processed, and the causal chain is obtained by searching the problem diagram. Subsequently, we calculate the correlation degree of the domains in the problem diagram. Then, based on the calculated correlation, we implement a clustering algorithm for the problem domains and get the categorization result of the problem domains which is the initial microservice candidate. The developers can consider each category of the problem domain as a microservice by converting the problem domains into the microservices. Finally, a case study verifies the validity of our proposed approach.","Zhumei Yang,Sijie Wu,Cheng Zhang",2022 IEEE 2nd International Conference on Software Engineering and Artificial Intelligence (SEAI),2022
10.48550/arxiv.2212.11657,,2212.11657,Code Vectorization and Sequence of Accesses Strategies for Monolith Microservices Identification,"Migrating a monolith application into a microservices architecture can benefit from automation methods, which speed up the migration and improve the decomposition results. One of the current approaches that guide software architects on the migration is to group monolith domain entities into microservices, using the sequences of accesses of the monolith functionalities to the domain entities. In this paper, we enrich the sequence of accesses solution by applying code vectorization to the monolith, using the \textit{Code2Vec} neural network model. We apply \textit{Code2Vec} to vectorize the monolith functionalities. We propose two strategies to represent a functionality, one by aggregating its call graph methods vectors, and the other by extending the sequence of accesses approach with vectorization of the accessed entities. To evaluate these strategies, we compare the proposed strategies with the sequence of accesses strategy and an existing approach that uses class vectorization. We run all these strategies over a large set of codebases, and then compare the results of their decompositions in terms of cohesion, coupling, and complexity.","Vasco Faria,António Rito Silva",International Conference on Web Engineering,2022
10.1111/exsy.13158,,,Expert system for automatic microservices identification using <scp>API</scp> similarity graph,,"Xiaoxiao Sun,Salamat Boranbaev,Shicong Han,Huanqiang Wang,Dongjin Yu",Expert Systems,2022
10.23919/cisti49556.2020.9141150,,,Microservices identification strategies : A review focused on Model-Driven Engineering and Domain Driven Design approaches,"A proper architectural design for a microservices system is crucial for its success. Although there are several design strategies to identify software components in general, microservices demands special consideration. In this context of distributed systems, the component size directly impacts on nonfunctional requirements, such as performance, flexibility, reusability, etc. Design practices of coupling and cohesion have to be fine-tuned to determine the ideal microservices granularity. In order to shed light on this question, this study conducted a Systematic Literature Review that investigates microservices identification proposals. From procedures and guidelines inspired by Kitchenham et al., a rigorous research protocol was defined and performed, that covers publications from 2013 to 2019. Starting with an initial screening of 715 papers, 27 studies were considered relevant to answer four research questions. Besides microservices decomposition strategies, this review underlines Model Driven Engineering and Domain Driven Design, once they represent valuable approaches to support this challenging task. Moreover, this work highlights that only a few studies had explored these approaches in their strategies, which opens promising potential for further research.","Roger Anderson Schmidt,Marcello Thiry,Marcello Thiry,Marcello Thiry,Marcello Thiry",Iberian Conference on Information Systems and Technologies,2020
10.1007/978-3-319-67262-5_2,,,Microservices Identification Through Interface Analysis,"The microservices architectural style is gaining more and more momentum for the development of applications as suites of small, autonomous, and conversational services, which are then easy to understand, deploy and scale. One of today’s problems is finding the adequate granularity and cohesiveness of microservices, both when starting a new project and when thinking of transforming, evolving and scaling existing applications. To cope with these problems, the paper proposes a solution based on the semantic similarity of foreseen/available functionality described through OpenAPI specifications. By leveraging a reference vocabulary, our approach identifies potential candidate microservices, as fine-grained groups of cohesive operations (and associated resources). We compared our approach against a state-of-the-art tool, sampled microservices-based applications and decomposed a large dataset of Web APIs. Results show that our approach is able to find suitable decompositions in some 80% of the cases, while providing early insights about the right granularity and cohesiveness of obtained microservices.","Luciano Baresi,Martin Garriga,Alan De Renzis",European Conference on Service-Oriented and Cloud Computing,2017
10.1145/3377929.3390030,,,Search-based many-criteria identification of microservices from legacy systems,"The expensive maintenance of legacy systems lead companies to migrate such systems to a microservice architecture. This migration requires the identification of microservice candidates, which requires analysis of many criteria. Existing search-based approaches to solve this problem are only based on the coupling and cohesion criteria. To overcome these limitations, we propose a many-objective search-based approach for identifying microservice candidates. Its five objectives correspond to criteria pointed as useful by experienced developers. Our approach was evaluated in the context of a legacy system. The results show that our approach is very similar on optimizing the traditional criteria of coupling and cohesion, but much better when taking into account the additional criteria.","Luiz Carvalho,A Garcia,Alessandro Garcia,Thelma Elita Colanzi,Thelma Elita Colanzi,Wesley K. G. Assunção,Maria Julia Lima,Maria Julia Lima,Maria Julia Lima,Maria Julia Lima,Maria Julia Lima,Maria Julia Lima,Maria Julia de Lima,Baldoino Fonseca,Márcio Garcia Ribeiro,Márcio Ribeiro,Carlos José Pereira de Lucena",GECCO Companion,2020
10.1109/icsa-c54293.2022.00030,,,A Systematic Literature Review on Migration to Microservices: a Quality Attributes perspective,"Today&#x2019;s system migration focuses on modernizing legacy and monolithic systems towards microservices&#x2019; architectures. This study aims at understanding if and how quality attributes improvement are explicitly driving the migration process. We designed and conducted a systematic literature review on the topic. We started from over 2.000 potentially relevant research papers. We applied a selection procedure resulting in 58 selected research papers over the last six years. Our study revealed the following main findings: i) while still limited, quality attributes-driven migration is getting some attention, especially during the microservices identification phase; ii) we related the migration phases to the subset of quality attributes found in the papers accepted for this systematic review.","Roberta Capuano,Henry Muccini",2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C),2022
10.1109/sose55356.2022.00008,,,Migrating Monoliths to Microservices based on the Analysis of Database Access Requests,"Many organizations seek to improve the maintainability and scalability of their computing systems by migrating from a conventional monolithic architecture to a microservice architecture (MSA). Note that service identification is the most crucial step in architecture migration. In the current study, we developed a microservice identification scheme based on analyzing database access to account for the importance of the pattern ""Database Per Service"" in microservices design. The proposed MIADA (Microservices Identification using Analysis for Database Access) system facilitates the clustering of service endpoints used in the identification and creation of microservices. The feasibility and efficacy of the proposed MIADA approach were evaluated using two existing service-oriented software projects, PlanApproval and CoCoME. The evaluation results show that the MIADA approach can effectively recommend appropriate clusters of service endpoints to construct microservices.","Shang-Pin Ma,Tsung-Wen Lu,Chung-Chieh Li",International Symposium on Service Oriented Software Engineering,2022
10.1109/access.2022.3182495,,,GreenMicro: Identifying Microservices from Use Cases in Greenfield Development,"Microservices architecture is a new paradigm for developing a software system as a collection of independent services that communicate through lightweight protocols. In greenfield development, identifying the microservices is not a trivial task, as there is no legacy code lying around and no old development to start with. Thus, identification of microservices from requirements becomes an important decision during the analysis and design phase. Use cases play a vital role in the requirements analysis modeling phases in a model-driven software engineering process. It is a technique of capturing high-level user functions and scope of the system. In this paper, we propose GreenMicro, an automatic microservice identification technique that utilizes the use cases model and the database entities. Both features are the artifacts of analysis and design phase that depict complete functionality of an overall system. In essence, a collection of related use cases indicates a bounded context of the system that can be grouped in a suitable way as microservices. Therefore, our approach GreenMicro clusters close-knit use cases to recover meaningful microservices. We investigate and validate our approach on an in-house proprietary web application and three sample benchmark applications. We have mapped our approach to state-of-the-art software quality assessment attributes and have presented the results. Preliminary results are motivating and the proposed methodology works as anticipated in producing functionally cohesive and loosely coupled microservice candidate recommendations. Our approach enables the system architects to identify microservice candidates at an early analysis and design phase of development.","Deepali Bajaj,Anita Goel,S. C. Gupta",IEEE Access,2022
10.1109/icws55610.2022.00065,,,Log2MS: a framework for automated refactoring monolith into microservices using execution logs,"Service models and modelling are vital in monolith-to-microservice architecture (MSA) migration of legacy systems. Prior work focuses on service identification, whereas few efforts have been investigating microservice models and modelling. It remains an immature field of Model-Driven Development (MDD) of MSA due to it lack modelling methods and tools for monolith-to-MSA migration. We present Log2MS, an MDD framework for automated transforming legacy monolithic architecture into MSA using execution logs only. We define microservice and microservice sequence diagrams to support monolith-to-MSA structural and behavioural modelling; we present a source-code free monolith-to-MSA approach and a prototypical tool which support automatically microservices identification and MSA models generation; we developed a graphical editor to represent the generated MSA models for further interactively modelling. Log2MS is evaluated being of applicability, robustness, and effectiveness by comparative experiments with 2 representative approaches and applying to 4 projects.","Bo Liu,Jingliu Xiong,Qiurong Ren,Shmuel Tyszberowicz,Zheng Yang",2022 IEEE International Conference on Web Services (ICWS),2022
10.1145/3564982.3564995,,,Using Database Schemas of Legacy Applications for Microservices Identification: A Mapping Study,"The extraction of software components or services from a legacy system, is a very active field of research especially after the introduction of the microservices architectures. There are many different proposed approaches to solve this complex problem with the help of static and dynamic analysis of the source code, domain driven business dataflow diagrams etc. When we are dealing with a legacy system (e.g., a system with monolithic architecture) the most common asset that we inherit, aside from the application's code itself, is the database schema and its data. The source code isn't always available for analysis and the dataflow diagrams although helpful to some extent, they do not provide any reuse of the system's source code. The purpose of this research is to systematically identify primary studies that are using the database artefacts for microservice extraction, analyse the type of the artefacts and the degree they are used, and lastly investigate if the proposed methods support automation. We will then try to verbally analyse their viability in a real world scenario based on our many year experience working with legacy systems. In the context of this research, we conducted a systematic mapping study regarding the usage of database artefacts for the identification of components or services. This article presents the results of this study. Our future research goal is to use the database schema, state of data, dependencies, foreign keys etc., for identifying discrete business units within the legacy system database. Each such unit will have loose coupling with other units and be highly cohesive making it a potential microservice.","Antonios Mparmpoutis,George Kakarontzas",International Conference on Advancements in Computational Sciences,2022
10.1016/j.sysarc.2021.102200,,,A multi-model based microservices identification approach,"Abstract   Microservices are hailed for their capabilities to tackle the challenge of breaking monolithic business systems down into small, cohesive, and loosely-coupled services. Indeed, these systems are neither easy to maintain nor to replace undermining organizations’ efforts to cope with user’s changing needs and governments’ complex regulations. Microservices constitute an architectural style for developing a new generation of systems as a suite of services that, although they are separate, engage in collaborative execution and communication sessions. However, microservices success depends, among many other things, on the existence of an approach that would automatically identify the necessary microservices according to organizations’ requirements. In this paper, we present such an approach and demonstrate its technical doability in the context of a case study, Bicing, for renting bikes. Some salient features of this approach are business processes as input for the identification needs, threemodels known as control, data, and semantic to capture dependencies between these processes’ activities, and, finally, a collaborative clustering technique that recommends potential microservices. Conducted experiments in the context of Bicing clearly indicate that our approach outperforms similar ones for microservices identification and reinforce the important role of business processes in this identification. The approach constitutes a major milestone towards a better architectural style for future microservices systems.","Mohamed I. Daoud,Asmae El Mezouari,Noura Faci,Djamal Benslimane,Zakaria Maamar,Aziz El Fazziki",Journal of Systems Architecture,2021
10.1007/978-3-030-64846-6_9,,,A Qualitative Literature Review on Microservices Identification Approaches,"Microservices has become a widely used and discussed architectural style for designing modern applications due to advantages like granular scalability and maintainability. However, it is still a complex task decomposing an application into microservices. Software architects often design architectures manually. In this paper we give a state-of-the-art overview of current approaches to identifying microservices. Therefore we use a literature review and classify the content based on the software development process.","Christoph Schröer,Christoph Schröer,Felix Kruse,Jorge Marx Gómez",Symposium and Summer School on Service-Oriented Computing,2020
10.1145/3412841.3442016,,,Identification of microservices from monolithic applications through topic modelling,"National Funds through the Portuguese
funding agency, FCT - Fundacao para a Ciencia e a Tecnologia
within project UIDB/50014/2020","Miguel A. Brito,Jácome Cunha,João Saraiva",ACM Symposium on Applied Computing,2021
10.1109/access.2021.3106342,,,Microservices Backlog–A Genetic Programming Technique for Identification and Evaluation of Microservices From User Stories,"The microservice granularity directly affects the quality attributes and usage of computational resources of the system, determining optimal microservice granularity is an open research topic. Microservices granularity is defined by the number of operations exposed by the microservice, the number of microservices that compose the whole application, and its complexity and dependencies. This paper describes “Microservice Backlog (MB)”, a semiautomatic model for defining and evaluating the granularity of microservice-based applications; MB uses genetic programming technique to calculate at design time the granularity of each microservice from the user stories in the “product backlog” or release planning; the genetic algorithm combined coupling, cohesion, granularity, semantic similarity, and complexity metrics to define the number of microservices, and the user stories associated with each microservice. MB decomposes the candidate microservices, allowing to analyze graphically the size of each microservice, as well as its complexity, dependencies, coupling, cohesion metrics, and the number of calls or requests between microservices. The resulting decomposition (number of microservices and their granularity) performed by MB shows less coupling, higher cohesion, less complexity, fewer user stories associated with each microservice, and fewer calls among microservices. MB was validated against three existing methods, using two state-of-the-art applications (Cargo Tracking and JPet-Store), and one real-life application (Foristom Conferences). The development team and/or architect can use metrics to identify the critical points of the system and determine at design time how the microservice-based application will be implemented.","F H Vera-Rivera,Eduard Puerto,Hernan Astudillo,Hernán Astudillo,Carlos Gaona,Carlos Mauricio Gaona",IEEE Access,2021
10.1109/scc.2018.00042,,,Object-Aware Identification of Microservices,"Microservices is an architectural style inspired by service-oriented computing that structures an application as a collection of cohesive and loosely coupled components, which implement business capabilities. One of today’s problems in designing microservice architectures is to decompose a system into cohesive, loosely coupled, and fine-grained microservices. Identification of microservices is usually performed intuitively, based on the experience of the system designers, however, if the functionalities of a system are highly interconnected, it is a challenging task to decompose the system into appropriate microservices. To tackle this challenge, we present a microservice identification method that decomposes a system using clustering technique. To this end, we model a system as a set of business processes and take two aspects of structural dependency and data object dependency of functionalities into account. Furthermore, we conduct a study to evaluate the effect of process characteristics on the accuracy of identification approaches.",Mohammad Javad Amiri,IEEE International Conference on Services Computing,2018
10.1109/icws.2017.61,,,Extraction of Microservices from Monolithic Software Architectures,"Driven by developments such as mobile computing, cloud computing infrastructure, DevOps and elastic computing, the microservice architectural style has emerged as a new alternative to the monolithic style for designing large software systems. Monolithic legacy applications in industry undergo a migration to microservice-oriented architectures. A key challenge in this context is the extraction of microservices from existing monolithic code bases. While informal migration patterns and techniques exist, there is a lack of formal models and automated support tools in that area. This paper tackles that challenge by presenting a formal microservice extraction model to allow algorithmic recommendation of microservice candidates in a refactoring and migration scenario. The formal model is implemented in a web-based prototype. A performance evaluation demonstrates that the presented approach provides adequate performance. The recommendation quality is evaluated quantitatively by custom microservice-specific metrics. The results show that the produced microservice candidates lower the average development team size down to half of the original size or lower. Furthermore, the size of recommended microservice conforms with microservice sizing reported by empirical surveys and the domain-specific redundancy among different microservices is kept at a low rate.","Genc Mazlami,Jürgen Cito,Philipp Leitner",,2017
10.1109/apsec.2017.53,,,From Monolith to Microservices: A Dataflow-Driven Approach,"Emerging from the agile practitioner communities, the microservice-oriented architecture emphasizes implementing and employing multiple small-scale and independently deployable microservices, rather than encapsulating all function capabilities into one monolithic application. Correspondingly, microservice-oriented decomposition, which has been identified to be an extremely challenging and complex task, plays a crucial and prerequisite role in developing microservice-based software systems. To address this challenge and reduce the complexity, we proposed a top-down analysis approach and developed a dataflow-driven decomposition algorithm. In brief, a three-step process is defined: first, engineers together with users conduct business requirement analysis and construct a purified while detailed dataflow diagram of the business logic; then, our algorithm combines the same operations with the same type of output data into a virtual abstract dataflow; finally, the algorithm extracts individual modules of ""operation and its output data"" from the virtual abstract dataflow to represent the identified microservice candidates. We have employed two use cases to demonstrate our microservice identification mechanism, as well as making comparisons with an existing microservice identification tool. The comparison and evaluation show that, our dataflow-driven identification mechanism is able to deliver more rational, objective, understandable and consistent microservice candidates, through a more rigorous and practical implementation procedure.","Rui Chen,Shanshan Li,Shanshan Li,Shanshan Li,Zheng Li",,2017
10.1109/rew.2016.026,,,Requirements Reconciliation for Scalable and Secure Microservice (De)composition,"Traditional monolithic services fail to scale efficiently when a certain task within the service is flooded. They also have a long software release cycle due to the system complexity. Microservices, as a new architectural style, are built upon the idea of breaking a large service into a set of single-responsibility (along with other properties) services that are communicating over network. In such a setting, services can scale more efficiently and release cycles become shorter thanks to the continuous deployment. Also, breaking a system into microservices is a daunting task. Normally, such design decisions are made by developers or architects with some intuitions. We argue that this approach only captures the interest of a narrowed set of stakeholders and thus fails to account system-wide requirements. In this work, we propose a conceptual methodology using which security and scalability requirements are incorporated in decomposing system into microservices. Using this methodology, requirements engineers can mindfully reconcile security and scalability requirements. This initiates architectural decisions (i.e. system decomposition) at requirements engineering phase and hence expands the system architects' view. We also examine our methodology by applying it to a fictional case study.","Mohsen Ahmadvand,Amjad Ibrahim,Amjad Ibrahim",,2016
10.1109/icws.2018.00034,,,Functionality-Oriented Microservice Extraction Based on Execution Trace Clustering,"The main task of microservice extraction is to find which software entities (e.g., methods, classes) should be grouped together from existing monolithic software as candidate microservices, responsible for specific functionalities and evolving independently. Current methods extract microservices by analyzing source code and following the assumption that ""classes with strong relation should be in the same service"", which originates from software structure analysis. We find that 1) many program behaviors cannot be explicitly reflected in the source code, and 2) the relation at code-level is not equivalent to the same functionality. Thus, we propose a functionality-oriented microservice extraction (FoME) method in this study by monitoring program dynamic behavior and clustering execution traces. Instead of source code analysis, the execution traces of a program are applied to group source code entities that are dedicated to the same functionality. We also construct a systematic measurement of microservice by integrating five complementary metrics of service cohesion and coupling. These metrics measure Functional Independence of microservices. That is, it qualifies whether a microservices can have its own responsibilities independently. In the experiment, our method is compared with three state-of-the-art methods on four open-source projects. The microservice candidates generated using our method present similar functional cohesion to the services produced using the other methods, but have considerably looser coupling measurements (dramatically reducing measurements of IRN and OPN).","Wuxia Jin,Ting Liu,Qinghua Zheng,Di Cui,Yuanfang Cai",,2018
10.1109/clei.2016.7833410,,,Towards the understanding and evolution of monolithic applications as microservices,"Nowadays, software development teams face the challenge of maintenance and evolution of large applications. This is known as modernization and comprises a process of understanding the existing application, and a process of transforming from the as-is state to the to-be state. In this article, we present an approach to modernize legacy applications into microservices. We propose a model-centered process to analyze and visualize the current structure and dependencies between the business layer and the data layer. Furthermore, we propose a modularization into clusters and microservices using four different diagrams. To validate our approach we have analyzed a JEE application with over 74566 LoC. The results show that the understanding is greatly improved through the diagrams proposed, and the modularization proposed constitutes the first step towards the automated modernization of the application.","Daniel Escobar,Diana Cardenas,Rolando Amarillo,Eddie Castro,Kelly Garcés,Carlos Parra,Carlos Parra,Carlos Parra,Rubby Casallas",,2016
10.1109/aims.2017.23,,,Migrating Monolithic Mobile Application to Microservice Architecture: An Experiment Report,"The microservice architecture (MSA) is an emerging cloud software system, which provides fine-grained, self-contained service components (microservices) used in the construction of complex software systems. DevOps techniques are commonly used to automate the process of development and operation through continuous integration and continuous deployment. Monitoring software systems created by DevOps, makes it possible for MSA to obtain the feedback necessary to improve the system quickly and easily. Nonetheless, systematic, SDLC-driven methods (SDLC: software development life cycle) are lacking to facilitate the migration of software systems from a traditional monolithic architecture to MSA. Therefore, this paper proposes a migration process based on SDLC, including all of the methods and tools required during design, development, and implementation. The mobile application, EasyLearn, was used as an illustrative example to demonstrate the efficacy of the proposed migration process. We believe that this paper could provide valuable references for other development teams seeking to facilitate the migration of existing applications to MSA.","Chen-Yuan Fan,Shang-Pin Ma",,2017
10.1007/978-3-319-99819-0_5,,,Re-architecting OO Software into Microservices,"Due to its tremendous advantages, microservice architectural style has become an essential element for the development of applications deployed on the cloud and for those adopting the DevOps practices. Migrating existing applications to microservices allow them to benefit from these advantages. Thus, in this paper, we propose an approach to automatically identify microservices from OO source code. The approach is based on a quality function that measures both the structural and behavioral validity of microservices and their data autonomy. Unlike existing works, ours is based on a well-defined function measuring the quality of microservices and use the source code as the main source of information.","Anfel Selmadji,Abdelhak-Djamel Seriai,Hinde Lilia Bouziane,Christophe Dony,Rahina Oumarou Mahamane",,2018
,,,Towards a Technique for Extracting Microservices from Monolithic Enterprise Systems.,"The idea behind microservices architecture is to develop a single large, complex, application as a suite of small, cohesive, independent services. On the other way, monolithic systems get larger over the time, deviating from the intended architecture, and becoming tough, risky, and expensive to evolve. This paper describes a technique to identify and define microservices on a monolithic enterprise system. As the major contribution, our evaluation demonstrate that our approach could identify good candidates to become microservices on a 750 KLOC banking system, which reduced the size of the original system and took the benefits of microservices architecture, such as services being developed and deployed independently, and technology independence.","Alessandra Levcovitz,Ricardo Terra,Marco Tulio Valente",arXiv: Software Engineering,2016
10.1007/978-3-319-99933-3_4,,,Identifying Microservices Using Functional Decomposition,"The microservices architectural style is rising fast, and many companies use this style to structure their systems. A big challenge in designing this architecture is to find an appropriate partition of the system into microservices. Microservices are usually designed intuitively, based on the experience of the designers. We describe a systematic approach to identify microservices in early design phase which is based on the specification of the system’s functional requirements and that uses functional decomposition. To evaluate our approach, we have compared microservices implementations by three independent teams to the decomposition provided by our approach. The evaluation results show that our decomposition is comparable to manual design, yet within a much shorter time frame.","Shmuel S. Tyszberowicz,Robert Heinrich,Bo Liu,Zhiming Liu,Zhiming Liu,Zhiming Liu",,2018
10.1109/tse.2019.2910531,,,Service Candidate Identification from Monolithic Systems Based on Execution Traces,"Monolithic systems increasingly suffer from maintainability and scalability issues as they grow in functionality, size, and complexity. It is widely believed that (micro)service-based architectures can alleviate these problems as each service is supposed to have the following characteristics: clearly defined functionality, sufficient modularity, and the ability to evolve independently. Industrial practices show that service extraction from a legacy monolithic system is labor-intensive and complex. Existing work on service candidate identification aims to group entities of a monolithic system into potential service candidates, but this process has two major challenges: first, it is difficult to extract service candidates with consistent quality; second, it is hard to evaluate the identified service candidates regarding the above three characteristics. To address these challenges, this paper proposes the Functionality-oriented Service Candidate Identification (FoSCI) framework to identify service candidates from a monolithic system. Our approach is to record the monolith's execution traces, and extract services candidates using a search-based functional atom grouping algorithm. We also contribute a comprehensive service candidate evaluation suite that uses interface information, structural/conceptual dependency, and commit history. This evaluation system consists of 8 metrics, measuring functionality, modularity, and evolvability respectively of identified service candidates. We compare FoSCI with three existing methods, using 6 widely-used open-source projects as our evaluation subjects. Our results show that FoSCI outperforms existing methods in most measures.","Wuxia Jin,Ting Liu,Yuanfang Cai,Rick Kazman,Ran Mo,Qinghua Zheng",IEEE Transactions on Software Engineering,2019
10.1007/978-3-030-29983-5_3,,,From a Monolith to a Microservices Architecture: An Approach Based on Transactional Contexts,"Microservices have become the software architecture of choice for business applications. Initially originated at Netflix and Amazon, they result from the need to partition, both, software development teams and executing components, to, respectively, foster agile development and horizontal scalability. Currently, there is a large number of monolith applications that are being migrated to a microservices architecture. This article proposes the identification of business applications transactional contexts for the design of microservices. Therefore, the emphasis is to drive the aggregation of domain entities by the transactional contexts where they are executed, instead of by their domain structural inter-relationships. Additionally, we propose a complete workflow for the identification of microservices together with a set of tools that assist the developers on this process. The comparison of our approach with another software architecture tool and with an expert decomposition in two case studies revealed high precision values, which reflects that accurate service candidates are produced, while providing visualization perspectives facilitates the analysis of the impact of the decomposition on the application business logic.","Luís Miguel Nunes,Luís Nunes,Luis M. Nunes,Nuno C. Santos,Nuno Santos,Nuno C. Santos,Ana Maria Silva,António Rito Silva",,2019
10.1145/3234152.3234195,,,An automatic extraction approach: transition to microservices architecture from monolithic application,"Microservice architecture has been introduced as a new alternative to the monolithic architecture. It has several benefits like scalability, reliability, increase in agility and productivity, resilience to failure, ease of deployment and maintenance, and decrease in time to market. Therefore, software companies have showed a tendency to transform architecture of their legacy applications from monoliths to microservice architecture. In this transformation process, software development teams face the challenge of migration of large applications to the new architecture, where understanding the current application and reusing existing code base are important. In this paper, we propose a new approach to transform existing applications into microservices using code repositories. We use evolutionary and static code coupling information, and the graph clustering methodology, in order to automatically extract microservices from monoliths. In experimental analysis, we investigate two software projects and our approach reach up to 89% of success rate by comparing extracted microservices with the actual results.","Sinan Eski,Feza Buzluca",,2018
10.5220/0007755901530164,,,From Monolithic Systems to Microservices: A Decomposition Framework based on Process Mining.,,"Davide Taibi,Kari Systä,Kari Systä",,2019
10.1016/j.jss.2019.07.008,,,A dataflow-driven approach to identifying microservices from monolithic applications,"Abstract   Microservices architecture emphasizes employing multiple small-scale and independently deployable microservices, rather than encapsulating all function capabilities into one monolith. Correspondingly, microservice-oriented decomposition, which has been identified to be an extremely challenging task, plays a crucial and prerequisite role in developing microservice-based systems. To address the challenges in such a task, we propose a dataflow-driven semi-automatic decomposition approach. In particular, a four-step decomposition procedure is defined: (1) conduct the business requirement analysis to generate use case and business logic specification; (2) construct the fine-grained Data Flow Diagrams (DFD) and the process-datastore version of DFD (DFDPS) representing the business logics; (3) extract the dependencies between processes and datastores into decomposable sentence sets; and (4) identify candidate microservices by clustering processes and their closely related datastores into individual modules from the decomposable sentence sets. To validate this microservice-oriented decomposition approach, we performed a case study on Cargo Tracking System that is a typical case decomposed by other microservices identification methods (Service Cutter and API Analysis), and made comparisons in terms of specific coupling and cohesion metrics. The results show that the proposed dataflow-driven decomposition approach can recommend microservice candidates with sound coupling and cohesion through a rigorous and easy-to-operate implementation with semi-automatic support.","Shanshan Li,Shanshan Li,Shanshan Li,He Zhang,He Zhang,Zijia Jia,Zheng Li,Zheng Li,Cheng Zhang,Cheng Zhang,Cheng Zhang,Jiaqi Li,Qiuya Gao,Jidong Ge,Zhihao Shan",Journal of Systems and Software,2019
10.1109/sccc49216.2019.8966423,,,Migrating from monolithic architecture to microservices: A Rapid Review,"Microservices architecture has become enormously popular because traditional monolithic architectures no longer meet the needs of scalability and rapid development cycle, and the success of some large companies in building and deploying services is a strong motivation for others to consider making the change. However, performing the migration process is not trivial. Most systems acquire too many dependencies between their modules, and thus can't be sensibly broken apart. It is for this reason that studies that provide information associated with the migration process to practitioners are necessary. This study gathers, organizes and analyzes 20 migration techniques proposed in the literature. Results show that most proposals use approaches based on design elements as input; 90% of the proposals were applied to object-oriented software (Java being the predominant programming language); And that the main challenge is to perform the database migration.","Francisco Ponce,Francisco Ponce,Francisco Ponce,Gaston Marquez,Hernán Astudillo",,2019
10.1109/icsa.2017.32,,,Microservice Ambients: An Architectural Meta-Modelling Approach for Microservice Granularity,"Isolating fine-grained business functionalities byboundaries into entities called microservices is a core activityunderlying microservitization. We define microservitization asthe paradigm shift towards microservices. Determining theoptimal microservice boundaries (i.e. microservice granularity) is among the key microservitization design decisions thatinfluence the Quality of Service (QoS) of the microservice applicationat runtime. In this paper, we provide an architecturecentricapproach to model this decision problem. We build onambients — a modelling approach that can explicitly capturefunctional boundaries and their adaptation. We extend the aspect-oriented architectural meta-modelling approach of ambients—AMBIENT-PRISMA — with microservice ambients. A microservice ambient is a modelling concept that treatsmicroservice boundaries as an adaptable first-class entity. Weuse a hypothetical online movie subscription-based systemto capture a microservitization scenario using our aspectorientedmodelling approach. The results show the ability ofmicroservice ambients to express the functional boundary of amicroservice, the concerns of each boundary, the relationshipsacross boundaries and the adaptations of these boundaries. Additionally, we evaluate the expressiveness and effectivenessof microservice ambients using criteria from ArchitectureDescription Language (ADL) classification frameworkssince microservice ambients essentially support architecturedescription for microservices. The evaluation focuses on thefundamental modelling constructs of microservice ambientsand how they support microservitization properties such asutility-driven design, tool heterogeneity and decentralised governance. The evaluation highlights how microservice ambientssupport analysis, evolution and mobility/location awarenesswhich are significant to quality-driven microservice granularityadaptation. The evaluation is general and irrespective of theparticular application domain and the business competenciesin that domain.","Sara Hassan,Nour Ali,Rami Bahsoon",,2017
10.1109/icsa.2018.00012,,,Migrating Towards Microservice Architectures: An Industrial Survey,"Microservices are gaining tremendous traction in industry and a growing scientific interest in academia. More and more companies are adopting this architectural style for modernizing their products and taking advantage of its promised benefits (e.g., agility, scalability). Unfortunately, the process of moving towards a microservice-based architecture is anything but easy, as there are plenty of challenges to address from both technical and organizational perspectives. In this paper we report about an empirical study on migration practices towards the adoption of microservices in industry. Specifically, we designed and conducted a survey targeting practitioners involved in the process of migrating their applications and we collected information (by means of interviews and questionnaires) on (i) the performed activities, and (ii) the challenges faced during the migration. Our findings benefit both (i) researchers by highlighting future directions for industryrelevant problems and (ii) practitioners by providing a reference framework for their (future) migrations towards microservices.","Paolo Di Francesco,Patricia Lago,Ivano Malavolta",,2018
10.23919/mipro.2018.8400254,,,Monolithic to microservices redesign of event driven integration platform,"With this paper we presented architectural redesign of SOA (service oriented architecture) integration platform by following principles of microservices design. Presented SOA platform is currently in use for Real estate sector. Number of messages which need to be processed by platform is growing as well as number of new integrations which requires redesign of platform. Redesign should provide ability for scalability, better resource management, maintenance and deployment. To support this, it is necessary to transform integration platform to be microservices based.","Ervin Djogic,Samir Ribic,Dzenana Donko",,2018
10.1007/978-3-030-06019-0_10,,,From Monolith to Microservices: A Classification of Refactoring Approaches.,"While the recently emerged Microservices architectural style is widely discussed in literature, it is difficult to find clear guidance on the process of refactoring legacy applications. The importance of the topic is underpinned by high costs and effort of a refactoring process which has several other implications, e.g. overall processes (DevOps) and team structure. Software architects facing this challenge are in need of selecting an appropriate strategy and refactoring technique. One of the most discussed aspects in this context is finding the right service granularity to fully leverage the advantages of a Microservices architecture. This study first discusses the notion of architectural refactoring and subsequently compares 10 existing refactoring approaches recently proposed in academic literature. The approaches are classified by the underlying decomposition technique and visually presented in the form of a decision guide for quick reference. The review yielded a variety of strategies to break down a monolithic application into independent services. With one exception, most approaches are only applicable under certain conditions. Further concerns are the significant amount of input data some approaches require as well as limited or prototypical tool support.","Jonas Fritzsch,Justus Bogner,Alfred Zimmermann,Stefan Wagner",arXiv: Software Engineering,2018
10.1145/3275219.3275230,,,Migrating Web Applications from Monolithic Structure to Microservices Architecture,"In the traditional software development and deployment, the centralized monolithic is always adopted, as the modules are tightly coupled, which caused many inconvenience in software DevOps. The modules with bottlenecks in monolithic application cannot be extend separately as the application is an integral part, and different module cannot use different technology stack. To prolong the lifecycle of the monolithic applications, its need to migrated it to microservice architecture. Due to the complex logic and large number of third party framework libraries depended, get an accurate comprehensive of the application characteristics is challenging. The existing research mostly based on the static characteristics, lack of consideration of the runtime dynamic characteristics, and the completeness and accuracy of the static analysis is inadequate. To resolve above problems, we combined static and dynamic analysis to get static structure and runtime behavior characteristics of monolithic application. We employed the coupling among functions to evaluate the degree of dependence, and through function clustering to achieve the migration of legacy monolithic applications and its data to microservices architecture. Through the empirical study of migrate the typical legacy project to microservices, it is proved that we proposed method can offer precise guidance and assistance in the migration procedure. Experiments show that the method has high accuracy and low performance cost.","Zhongshan Ren,Wei Wang,Guoquan Wu,Chushu Gao,Wei Chen,Wei Chen,Wei Chen,Wei Chen,Wei Chen,Jun Wei,Tao Huang",,2018
10.1016/j.jss.2019.02.031,,,Unsupervised learning approach for web application auto-decomposition into microservices,"Abstract   Nowadays, large monolithic web applications are manually decomposed into microservices for many reasons including adopting a modern architecture to ease maintenance and increase reusability. However, the existing approaches to refactor a monolithic application do not inherently consider the application scalability and performance. We devise a novel method to automatically decompose a monolithic application into microservices to improve the application scalability and performance. Our proposed decomposition method is based on a black-box approach that uses the application access logs and an unsupervised machine-learning method to auto-decompose the application into microservices mapped to URL partitions having similar performance and resource requirements. In particular, we propose a complete automated system to decompose an application into microservices, deploy the microservices using appropriate resources, and auto-scale the microservices to maintain the desired response time. We evaluate the proposed system using real web applications on a public cloud infrastructure. The experimental evaluation shows an improved performance of the auto-created microservices compared with the monolithic version of the application and the manually created microservices.","Muhammad Imran Abdullah,Waheed Iqbal,Abdelkarim Erradi",Journal of Systems and Software,2019
10.1007/978-3-030-33702-5_5,,,Towards Automated Microservices Extraction Using Muti-objective Evolutionary Search,"We introduce in this paper a novel approach, named MSExtractor, that formulate the microservices identification problem as a multi-objective combinatorial optimization problem to decompose a legacy application into a set of cohesive, loosely-coupled and coarse-grained services. We employ the non-dominated sorting genetic algorithm (NSGA-II) to drive a search process towards optimal microservices identification while considering structural dependencies in the source code. We conduct an empirical evaluation on a benchmark of two open-source legacy software systems to assess the efficiency of our approach. Results show that MSExtractor is able to find relevant microservice candidates and outperforms recent three state-of-the-art approaches.","Islem Saidani,Ali Ouni,Mohamed Wiem Mkaouer,Mohamed Wiem Mkaouer,Aymen Saied",,2019
10.1109/ms.2016.64,,,Microservices Architecture Enables DevOps: Migration to a Cloud-Native Architecture,"When DevOps started gaining momentum in the software industry, one of the first service-based architectural styles to be introduced, be applied in practice, and become popular was microservices. Migrating monolithic architectures to cloud-native architectures such as microservices reaps many benefits, such as adaptability to technological changes and independent resource management for different system components. This article reports on experiences and lessons learned during incremental migration and architectural refactoring of a commercial MBaaS (mobile back end as a service) to microservices. It explains how adopting DevOps facilitated a smooth migration. Furthermore, the researchers transformed their experiences in different projects into reusable migration practices, resulting in microservices migration patterns. This article is part of a theme issue on DevOps. The Web extra at https://youtu.be/MF3-dKTCQ88 is an audio recording of Brian Brannon speaking with author Pooyan Jamshidi and James Lewis, principal engineer at ThoughtWorks, about DevOps and microservices architecture.","Armin Balalaie,Abbas Heydarnoori,Pooyan Jamshidi",IEEE Software,2016
10.1109/hpcsim.2016.7568389,,,The ENTICE approach to decompose monolithic services into microservices,"Cloud computing has enabled elastic and on-demand service provisioning to achieve more efficient resource utilisation and quicker responses to varying application loads. Virtual machines, the building blocks of clouds, can be created using provider specific templates stored in proprietary repositories, which may lead to provider lock-in and decreased portability. Despite these enabling technologies, large scale service oriented applications are still mostly inelastic. Such applications often use monolithic services that limit the elasticity (e.g., by obstructing the replicability of parts of a monolithic service). Decomposing these services (leading to smaller, more targeted and more modular services) would open towards elasticity, but the decomposition process is mostly manual. This paper introduces a methodology for decomposing monolithic services to several so called microservices. The proposed methodology applies several outcomes of the ENTICE project (namely its image synthesis and optimisation tools). Finally, the paper provides insights on how these outcomes help revitalise past monolithic services, and what techniques are applied to aid future microservice developers.","Gabor Kecskemeti,Attila Csaba Marosi,Attila Kertesz",,2016
10.1109/ms.2018.2141035,,,Using Microservices for Legacy Software Modernization,"Microservices are commonly known as an architecture for building scalable applications running in the cloud. However, they also promise high maintainability due to smaller code bases and strong component separation, making them an interesting option for software modernization. This article presents a migration process to decompose an existing application into microservices, and presents experiences from applying this process in an ongoing legacy modernization project.","Holger Knoche,Wilhelm Hasselbring",IEEE Software,2018
10.1002/spe.2608,,,Microservices migration patterns,,"Armin Balalaie,Abbas Heydarnoori,Pooyan Jamshidi,Damian A. Tamburri,Theo Lynn,Theo Lynn",Software - Practice and Experience,2018
10.1007/978-3-030-29983-5_17,,,Tool Support for the Migration to Microservice Architecture: An Industrial Case Study,"With the introduction of microservice architecture, many investigate how to migrate their legacy systems into this architectural paradigm. The migration process requires the recovery of the project architecture to be migrated together with the knowledge necessary to understand how to decompose the code and obtain new microservices. At the moment, this process is realized mostly manually. This paper introduces an approach to identify candidate microservices in monolithic Java projects, implemented in a tool named Arcan and the validation of the approach in an industrial setting. The approach involves static analysis of the system architecture, architectural smell detection and topic detection, a text mining method used here to model software domains starting from code analysis. We report the feedbacks we get from an experienced industrial developer who carried out the migration described in the case study. From this collaboration with industry we collected useful information to enhance the approach, improve the tool and replicate the study.","Ilaria Pigazzini,Francesca Arcelli Fontana,Andrea Maggioni",,2019
10.1007/978-3-319-33313-7_15,,1507.08217,Migrating to Cloud-Native Architectures Using Microservices: An Experience Report,"Migration to the cloud has been a popular topic in industry and academia in recent years. Despite many benefits that the cloud presents, such as high availability and scalability, most of the on-premise application architectures are not ready to fully exploit the benefits of this environment, and adapting them to this environment is a non-trivial task. Microservices have appeared recently as novel architectural styles that are native to the cloud. These cloud-native architectures can facilitate migrating on-premise architectures to fully benefit from the cloud environments because non-functional attributes, like scalability, are inherent in this style. The existing approaches on cloud migration does not mostly consider cloud-native architectures as their first-class citizens. As a result, the final product may not meet its primary drivers for migration. In this paper, we intend to report our experience and lessons learned in an ongoing project on migrating a monolithic on-premise software architecture to microservices. We concluded that microservices is not a one-fit-all solution as it introduces new complexities to the system, and many factors, such as distribution complexities, should be considered before adopting this style. However, if adopted in a context that needs high flexibility in terms of scalability and availability, it can deliver its promised benefits.","Armin Balalaie,Abbas Heydarnoori,Pooyan Jamshidi",arXiv: Software Engineering,2015
10.1109/tsc.2014.2310195,,,Cohesion-Driven Decomposition of Service Interfaces without Access to Source Code,"Software cohesion concerns the degree to which the elements of a module belong together. Cohesive software is easier to understand, test and maintain. In the context of service-oriented development, cohesion refers to the degree to which the operations of a service interface belong together. In the state of the art, software cohesion is improved based on refactoring methods that rely on information, extracted from the software implementation. This is a main limitation towards using these methods in the case of web services: web services do not expose their implementation; instead all that they export is the web service interface specification. To deal with this problem, we propose an approach that enables the cohesion-driven decomposition of service interfaces, without information on how the services are implemented. Our approach progressively decomposes a given service interface into more cohesive interfaces; the backbone of the approach is a suite of cohesion metrics that rely on information, extracted solely from the specification of the service interface. We validate the approach in 22 real-world services, provided by Amazon and Yahoo. We assess the effectiveness of the proposed approach, concerning the cohesion improvement, and the number of interfaces that result from the decomposition of the examined interfaces. Moreover, we show the usefulness of the approach in a user study, where developers assessed the quality of the produced interfaces.","Dionysis Athanasopoulos,Apostolos Zarras,George Miskos,Valérie Issarny,Panos Vassiliadis",IEEE Transactions on Services Computing,2015
10.5220/0005785501370146,,,Microservices: A Systematic Mapping Study,"Microservices have recently emerged as an architectural style, addressing how to build, manage, and evolve

architectures out of small, self-contained units. Particularly in the cloud, the microservices architecture approach

seems to be an ideal complementation of container technology at the PaaS level However, there is

currently no secondary study to consolidate this research. We aim here to identify, taxonomically classify and

systematically compare the existing research body on microservices and their application in the cloud. We

have conducted a systematic mapping study of 21 selected studies, published over the last two years until end

of 2015 since the emergence of the microservices pattern. We classified and compared the selected studies

based on a characterization framework. This results in a discussion of the agreed and emerging concerns

within the microservices architectural style, positioning it within a continuous development context, but also

moving it closer to cloud and container technology.","Claus Pahl,Pooyan Jamshidi",,2016
10.1109/icsaw.2017.35,,,From Monolith to Microservices: Lessons Learned on an Industrial Migration to a Web Oriented Architecture,"MGDIS SA is a software editing company that underwent a major strategic and technical change during the past three years, investing 17 300 man. Days rewriting its core business software from monolithic architecture to a Web Oriented Architecture using microservices. The paper presents technical lessons learned during and from this migration by addressing three crucial questions for a successful context-adapted migration towards a Web Oriented Architecture: how to determine (i) the most suitable granularity of micro-services, (ii) the most appropriate deployment and (iii) the most efficient orchestration?","Jean-Philippe Gouigoux,Jean-Philippe Gouigoux,Dalila Tamzalit",,2017
10.1109/mcc.2017.4250931,,,"Processes, Motivations, and Issues for Migrating to Microservices Architectures: An Empirical Investigation","Microservices have been getting more and more popular in recent years, and several companies are migrating monolithic applications to microservices. Microservices allow developers to independently develop and deploy services, and ease the adoption of agile processes. However, many companies are still hesitant to migrate because they consider microservice as a hype or because they are not aware of the migration process and the benefits and issues related to migration. For this purpose, we conducted a survey among experienced practitioners who already migrated their monoliths to microservices. In this paper, we identify a process framework based on the comparison of three different migration processes adopted by the interviewed practitioners, together with the common motivations and issues that commonly take place during migrations. In this work, we describe the results and provide an analysis of our survey, which includes a comparison of the migration processes, a ranking of motivations, and issues and some insights into the benefits achieved after the adoption. Maintainability and scalability were consistently ranked as the most important motivations, along with a few other technical and nontechnical motivations. Although return on investment was expected to take longer, the reduced maintenance effort in the long run was considered to highly compensate for this.","Davide Taibi,Valentina Lenarduzzi,Claus Pahl",,2017
10.1109/iccitechn.2017.8281804,,,A probabilistic approach for obtaining an optimized number of services using weighted matrix and multidimensional scaling Md. Shamim Towhid,"While migrating from Monolith to Microservices architectural style, it is often confusing to define service boundaries. This paper describes a probabilistic technique to define the services on a Monolithic system considering three major aspects — update rate, scaling rate, and technology diversity necessary to realize each service properly. To do so, we have used the weighted matrix and Multidimensional Scaling (MDS). This technique helps to define an optimal number of services for implementing the system in the Microservices Architecture. This paper will be useful for organizations trying to migrate from Monolithic System to Microservices.","Anika Sayara,Md. Shahriar Hossain",,2017
10.1145/3242163.3242164,,,Migrating towards microservices: migration and architecture smells,"Migrating to microservices is an error-prone process with deep pitfalls resulting in high costs for mistakes. Microservices is a relatively new architectural style, resulting in the lack of general guidelines for migrating monoliths towards microservices. We present 9 common pitfalls in terms of bad smells with their potential solutions. Using these bad smells, pitfalls can be identified and corrected in the migration process.","Andrés Carrasco,Brent van Bladel,Serge Demeyer",,2018
10.5220/0007732101340146,,,Migration of Software Components to Microservices: Matching and Synthesis,"Nowadays more and more software companies, as well as individual software developers, adopt the microservice architecture for their software solutions. Although many software systems are being designed and developed from scratch, a significant number of existing monolithic solutions tend to be transformed to this new architectural style. What is less common, though, is how to migrate component-based software systems to systems composed of microservices and enjoy the benefits of ease of changes, rapid deployment and versatile architecture. This paper proposes a novel and integrated process for the decomposition of existing software components with the aim being to fully or partially replace their functional parts with by a number of suitable and available microservices. The proposed process is built on semi-formal profiling and utilizes ontologies to match between properties of the decomposed functions of the component and those offered by microservices residing in a repository. Matching concludes with recommended solutions yielded by multi-objective optimization which considers also possible dependencies between the functional parts.","Andreas Christoforou,Lambros Odysseos,Andreas S. Andreou",,2019
10.1007/978-3-030-49432-2_7,,1908.08513,A Decomposition and Metric-Based Evaluation Framework for Microservices,"Migrating from monolithic systems into microservice is a very complex task. Companies are commonly decomposing the monolithic system manually, analyzing dependencies of the monolith and then assessing different decomposition options. The goal of our work is two-folded: 1) we provide a microservice measurement framework to objectively evaluate and compare the quality of microservices-based systems; 2) we propose a decomposition system based on business process mining. The microservice measurement framework can be applied independently from the decomposition process adopted, but is also useful to continuously evaluate the architectural evolution of a system. Results show that the decomposition framework helps companies to easily identify the different decomposition options. The measurement framework can help to decrease the subjectivity of the decision between different decomposition options and to evaluate architectural erosion in existing systems.","Davide Taibi,Kari Systä",arXiv: Software Engineering,2019
10.4018/ijssmet.298677,,,A Comparative Study of Meta-Data Based Microservice Extraction Tools,"Microservices are state-of-the-art architectural patterns for developing highly resilient and scalable applications to be hosted on the web. One of the tedious and challenging aspects on applying microservice pattern is the process of transforming legacy ""monolithic"" software to microservices. This process, named microservice extraction, is mostly done manually because of its complicated nature and the need for domain expertise. In this study, meta-data driven tools that aim to perform automatic extraction of microservices are focused. Initially, the studies that perform automatic microservice extraction are reviewed to identify public meta-data based tools. Afterwards, the identified tools are investigated by their relative success in extracting microservices. Reviewed tools suffer over-decomposition during extraction and most of them fail to provide a mature basis when considered to exhibit practical value to be used in real-world cases.","Kerem Akkaya,Tolga Ovatman","International Journal of Service Science, Management, Engineering, and Technology",2022
10.1109/saner50967.2021.00042,,,A Multi-Criteria Strategy for Redesigning Legacy Features as Microservices: An Industrial Case Study,"Microservices are small and autonomous services that communicate through lightweight protocols. Companies have often been adopting microservices to incrementally redesign legacy systems as part of a modernization process. Microservices promote better reuse and customization of existing features while increasing business capabilities, if appropriate design decisions are made. There are some partially-automated approaches supporting the re-design of legacy features into microservices. However, they fail in covering two key aspects: (i) provide an architectural design of the features being redesigned, and (ii) simultaneously support relevant criteria, e.g., feature modularization and decrease of network communication overhead. Also, these two aspects tend to be poorly discussed along industrial case studies. To fulfill these gaps, we propose a redesign strategy to support the re-engineering of features legacy code as microservices. This strategy covers key possibly-conflicting criteria on microservice-based architectures. We employ search-based optimization to deal with such conflicting criteria. The output of the strategy is a set of redesign candidates of legacy features as microservices. We reflect upon the benefits and drawbacks of the proposed strategy through an industrial case study. In particular, we perform an in-depth analysis of the resulting microservice candidates, and a discussion about their potential for customization and reuse. The reflections/discussions are also supported by observations of developers involved in the process.","Wesley K. G. Assunção,Wesley K. G. Assunção,Thelma Elita Colanzi,Luiz Carvalho,Juliana Alves Pereira,Juliana Alves Pereira,Alessandro Garcia,Maria Julia de Lima,Carlos José Pereira de Lucena",,2021
10.1002/spe.3081,,,A service graph based extraction of microservices from monolith services of service‐oriented architecture,"Service-oriented architecture (SOA) has been widely used to design enterprise applications in the past two decades. The services in SOA are becoming complex with the increase in changing user requirements and SOA is still seen as monolithic from a deployment perspective. Monolithic services make the application complex, and it becomes difficult to maintain. With the evolution of microservices architecture, software architects started migrating legacy applications to microservices. However, existing migration approaches in the literature mostly focus on migrating monolithic applications to microservices. To the best of our knowledge, very few works have been done in migrating SOA applications to microservices. One of the major challenges in the migration process is the extraction of microservices from the existing legacy applications. To address this, we propose an approach to extract the candidate microservices using graph based algorithms. In particular, four algorithms are defined: (i) construction of service graph (SG), (ii) construction of task graph (TG) for each service of the a SOA application, (iii) extraction of candidate microservices using the SG of SOA application, and (iv) construction of a SG for a microservices application to retain the dependencies between the generated microservices. We chose a SOA-based web application to demonstrate the proposed microservices extraction approach and extracted the microservices. Additionally, we have evaluated the extracted microservices and compared them with SOA based services.","Vinay Raj,Sadam Ravichandra",Software - Practice and Experience,2022
10.1145/3468264.3473915,,,Mono2Micro: a practical and effective tool for decomposing monolithic Java applications to microservices,"In migrating production workloads to cloud, enterprises often face the daunting task of evolving monolithic applications toward a microservice architecture. At IBM, we developed a tool called Mono2Micro to assist with this challenging task. Mono2Micro performs spatio-temporal decomposition, leveraging well-defined business use cases and runtime call relations to create functionally cohesive partitioning of application classes. Our preliminary evaluation of Mono2Micro showed promising results.   How well does Mono2Micro perform against other decomposition techniques, and how do practitioners perceive the tool? This paper describes the technical foundations of Mono2Micro and presents results to answer these two questions. To answer the first question, we evaluated Mono2Micro against four existing techniques on a set of open-source and proprietary Java applications and using different metrics to assess the quality of decomposition and tool’s efficiency. Our results show that Mono2Micro significantly outperforms state-of-the-art baselines in specific metrics well-defined for the problem domain. To answer the second question, we conducted a survey of twenty-one practitioners in various industry roles who have used Mono2Micro. This study highlights several benefits of the tool, interesting practitioner perceptions, and scope for further improvements. Overall, these results show that Mono2Micro can provide a valuable aid to practitioners in creating functionally cohesive and explainable microservice decompositions.","Anup K. Kalia,Jin Xiao,Rahul Krishna,Rahul Krishna,Saurabh Sinha,Maja Vukovic,Debasish Banerjee",,2021
10.1007/978-3-031-11513-4_7,,,Materializing Microservice-oriented Architecture from Monolithic Object-oriented Source Code,"AbstractFollowing the evolution of Cloud Computing and Service-Oriented Architecture (SOA), microservices (MS) have naturally emerged as the next trend due to the advantages they provide. These advantages include increased maintainability, better scalability, and an overall better synergy with DevOps techniques. This makes migrating legacy software towards a microservice-oriented architecture (MSA) an attractive prospect for organizations. The migration process is a complex and consequently risky endeavor that can be decomposed into two phases (1) the microservice-based architecture recovery phase and (2) the transformation (i.e. materialization) phase. Several studies have been done to automate the microservice architecture recovery phase. However, to the best of our knowledge, no work has been completed to automate the transformation phase. In this paper, we propose a systematic approach to refactor the existing code of an object-oriented monolithic application towards an MS-oriented one by using the target architecture from the recovery phase as a guide. By defining and applying a set of transformation patterns, we are able to generate a set of deployable microservices. Finally, we validate our approach by automating it through our tool MonoToMicro, and we apply it to a set of monolithic Java applications to generate a set of MSAs.KeywordsMicroservicesMonolithModernizationReverse engineeringRefactoringTransformationSoftware architecture","Pascal Zaragoza,Abdelhak-Djamel Seriai,Abderrahmane Seriai,Anas Shatnawi,Hinde-Lilia Bouziane,Mustapha Derras",Communications in computer and information science,2022
10.1016/j.jss.2020.110868,,,A taxonomy of service identification approaches for legacy software systems modernization,"Abstract   The success of modernizing legacy software systems to Service-Oriented Architecture (SOA) depends on Service Identification Approaches (SIAs), which identify reusable functionalities that could become services. The literature describes several SIAs. However, the selection of an identification approach that is suitable for a practitioner is difficult because it depends on several factors, including the goal of modernization, the available legacy artifacts, the organization’s development process, the desired output, and the usability of the approach. Accordingly, to select a suitable service identification approach, a practitioner must have a comprehensive view of existing techniques.  We report a systematic literature review (SLR) that covers 41 SIAs based on software-systems analyses. Based on this SLR, we create a taxonomy of SIAs and build a multi-layer classification of existing identification approaches. We start from a high-level classification based on the used inputs, the applied processes, the given outputs, and the usability of the SIAs. We then divide each category into a fine-grained taxonomy that helps practitioners in selecting a suitable approach for identifying services in legacy software systems. We build our SLR based on our experience with legacy software modernization, on discussions and experiences working with industrial partners, and analyses of existing SIAs. We validate the correctness and the coverage of our review with industrial experts who modernize(d) legacy software systems to SOA. The results show that our classification conforms to the industrial experts’ experiences. We also show that most of the studied SIAs are still at their infancy. Finally, we identify the main challenges that SIAs need to address, to improve their quality.","Manel Abdellatif,Manel Abdellatif,Anas Shatnawi,Hafedh Mili,Naouel Moha,Naouel Moha,Ghizlane El Boussaidi,Geoffrey Hecht,Jean Privat,Yann-Gaël Guéhéneuc",Journal of Systems and Software,2021
10.1007/s10664-020-09910-y,,,Promises and challenges of microservices: an exploratory study,"Microservice-based architecture is a SOA-inspired principle of building complex systems as a composition of small, loosely coupled components that communicate with each other using language-agnostic APIs. This architectural principle is now becoming increasingly popular in industry due to its advantages, such as greater software development agility and improved scalability of deployed applications. In this work, we aim at collecting and categorizing best practices, challenges, and some existing solutions for these challenges employed by practitioners successfully developing microservice-based applications for commercial use. Specifically, we focus our study on “mature” teams developing microservice-based applications for at least two years, explicitly excluding “newcomers” to the field. We conduct a broad, mixed-method study that includes in-depth interviews with 21 practitioners and a follow-up online survey with 37 respondents, covering 37 companies in total. Our study shows that, in several cases, practitioners opt to deviate from the “standard” advice, e.g., instead of splitting microservices by business capabilities, they focus on resource consumption and intended deployment infrastructure. Some also choose to refrain from using multiple programming languages for implementing their microservices, as that practice hinders reuse opportunities. In fact, our study participants identified robust and shared infrastructural support established early on in the development process as one of the main factors contributing to their success. They also identified several pressing challenges related to the efficient managing of common code across services and the support of product variants. The results of our study can benefit practitioners who are interested to learn from each other, borrow successful ideas, and avoid common mistakes. It can also inform researchers and inspire novel solutions to some of the identified challenges.","Yingying Wang,Harshavardhan Kadiyala,Julia Rubin",Empirical Software Engineering,2021
10.1016/j.jss.2021.111061,,,"Design, monitoring, and testing of microservices systems: The practitioners’ perspective","Context: Microservices Architecture (MSA) has received significant attention in the software industry. However, little empirical evidence exists on design, monitoring, and testing of microservices systems. Objective: This research aims to gain a deep understanding of how microservices systems are designed, monitored, and tested in the industry. Method: A mixed-methods study was conducted with 106 survey responses and 6 interviews from microservices practitioners. Results: The main findings are: (1) a combination of domain-driven design and business capability is the most used strategy to decompose an application into microservices, (2) over half of the participants used architecture evaluation and architecture implementation when designing microservices systems, (3) API gateway and Backend for frontend patterns are the most used MSA patterns, (4) resource usage and load balancing as monitoring metrics, log management and exception tracking as monitoring practices are widely used, (5) unit and end-to-end testing are the most used testing strategies, and (6) the complexity of microservices systems poses challenges for their design, monitoring, and testing, for which there are no dedicated solutions. Conclusions: Our findings reveal that more research is needed to (1) deal with microservices complexity at the design level, (2) handle security in microservices systems, and (3) address the monitoring and testing challenges through dedicated solutions.","Muhammad Waseem,Peng Liang,Peng Liang,Mojtaba Shahin,Amleto Di Salle,Gaston Marquez",Journal of Systems and Software,2021
,,,The Migration Journey Towards Microservices.,,"Hamdy Michael Ayas,Philipp Leitner,Regina Hebig",,2021
10.1016/j.jss.2020.110710,,,Does Migrate a Monolithic System to Microservices Decrease the Technical Debt,"Abstract   Background:  The migration from a monolithic system to microservices requires a deep refactoring of the system. Therefore, such a migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed up the migration itself, but also because of the demand for releasing new features.    Objective:  We monitored the technical debt of an SME while it migrated from a legacy monolithic system to an ecosystem of microservices. Our goal was to analyze changes in the code technical debt before and after the migration to microservices.    Method:  We conducted a case study analyzing more than four years of the history of a twelve-year-old project (280K Lines of Code) where two teams extracted five business processes from the monolithic system as microservices. For the study, we first analyzed the technical debt with SonarQube and then performed a qualitative study with company members to understand the perceived quality of the system and the motivation for possibly postponed activities.    Results:  The migration to microservices helped to reduce the technical debt in the long run. Despite an initial spike in the technical debt due to the development of the new microservice, after a relatively short period of time the technical debt tended to grow slower than in the monolithic system.","Valentina Lenarduzzi,Francesco Lomio,Nyyti Saarimäki,Davide Taibi",Journal of Systems and Software,2020
10.1109/icsa47634.2020.00023,,,From Monolithic Architecture Style to Microservice one Based on a Semi-Automatic Approach,"Due to its tremendous advantages, microservice architectural style has become an essential element for the development of applications deployed on the cloud and for those adopting the DevOps practices. Nevertheless, while microservices can be used to develop new applications, there are monolithic ones, that are not well adapted neither to the cloud nor to DevOps. Migrating these applications towards microservices appears as a solution to adapt them to both. In this context, we propose an approach aiming to achieve this objective by focusing on the step of microservices identification. The proposed identification, in this paper, is based on an analysis of the relationships between source code elements, their relationships with the persistent data manipulated in this code and finally the knowledge, often partial, of the architect concerning the system to migrate. A function that measures the quality of a microservice based on its ability to provide consistent service and its interdependence with others microservice in the resulting architecture was defined. Moreover, the architect recommendations are used, when available, to guide the identification process. The conducted experiment shows the relevance of the obtained microservices by our approach.","Anfel Selmadji,Abdelhak-Djamel Seriai,Hinde Lilia Bouziane,Rahina Oumarou Mahamane,Pascal Zaragoza,Christophe Dony",,2020
10.5753/eres.2020.13736,,,Towards a Process for Migrating Legacy Systems into Microservice Architectural Style,"Microservice architectural style is a paradigm to develop systems as a suite of small and autonomous services, communicating thought a lightweight protocol. Currently, the most common way of adopting microservice architectures is by the modernization of legacy monolith systems. The migration of a legacy system into a microservice architecture is not a trivial task. In addition, there is a lack of recommendation or guidelines on how to perform such process. In view of this, this paper presents a preliminary process for conducting the migration of legacy systems into microservice architectures. This process was defined by analyzing and discussing pieces of work on the topic. As result, we propose a process composed of eight steps, grouped in four phases, which we describe together with their common input and output.","Daniele Wolfart,Ederson Schmeing,Gustavo Cesar Lopes Geraldino,Guilherme Villaca,Diogo Paza,Diogo Paganini,Wesley K. G. Assunção,Wesley K. G. Assunção,Ivonei Freitas da Silva,Ivonei Freitas da Silva,Victor Francisco Araya Santander",,2020
10.1007/s10723-022-09624-z,,,Building a Performance Efficient Core Banking System Based on the Microservices Architecture,,"Fikri Aydemir,Fatih Başçiftçi",Journal of Grid Computing,2022
10.1007/s42979-021-00825-z,,,Applying Model-Driven Engineering to Stimulate the Adoption of DevOps Processes in Small and Medium-Sized Development Organizations,"Purpose: Microservice Architecture (MSA) denotes an increasingly popular architectural style in which business capabilities are wrapped into autonomously developable and deployable software components called microservices. Microservice applications are developed by multiple DevOps teams each owning one or more services. In this article, we explore the state of how DevOps teams in small and medium-sized organizations (SMOs) cope with MSA and how they can be supported. 
Methods: We show through a secondary analysis of an exploratory interview study comprising six cases, that the organizational and technological complexity resulting from MSA poses particular challenges for small and medium-sized organizations (SMOs). We apply Model-Driven Engineering to address these challenges. 
Results: As results of the second analysis, we identify the challenge areas of building and maintaining a common architectural understanding, and dealing with deployment technologies. To support DevOps teams of SMOs in coping with these challenges, we present a model-driven workflow based on LEMMA - the Language Ecosystem for Modeling Microservice Architecture. To implement the workflow, we extend LEMMA with the functionality to (i) generate models from API documentation; (ii) reference remote models owned by other teams; (iii) generate deployment specifications; and (iv) generate a visual representation of the overall architecture. 
Conclusion: We validate the model-driven workflow and our extensions to LEMMA through a case study showing that the added functionality to LEMMA can bring efficiency gains for DevOps teams. To develop best practices for applying our workflow to maximize efficiency in SMOs, we plan to conduct more empirical research in the field in the future.","Jonas Sorgalla,Philip Wizenty,Florian Rademacher,Sabine Sachweh,Albert Zündorf",,2021
10.1145/3336294.3336319,,,Extraction of Configurable and Reusable Microservices from Legacy Systems: An Exploratory Study,"Microservices is an emerging industrial technique to promote better modularization and management of small and autonomous services. Microservice architecture is widely used to overcome the limitations of monolithic legacy systems, such as limited maintainability and reusability. Migration to a microservice architecture is increasingly becoming the focus of academic research. However, there is little knowledge on how microservices are extracted from legacy systems in practice. Among these limitations, there is a lack of understanding if variability is considered useful along the microservice extraction from a configurable system. In order to address this gap, we performed an exploratory study composed of two phases. Firstly, we conducted an online survey with 26 specialists that contributed to the migration of existing systems to a microservice architecture. Secondly, we performed individual interviews with seven survey participants. A subset of the participants (13 out of 26) dealt with systems with variability during the extraction, which stated that variability is a key criterion for structuring the microservices. Moreover, variability in the legacy system is usually implemented with simple mechanisms. Finally, initial evidence points out that microservices extraction can increase software customization.","Luiz Carvalho,Alessandro Garcia,Wesley K. G. Assunção,Rodrigo Bonifácio,Leonardo P. Tizzei,Thelma Elita Colanzi",,2019
10.1145/3368089.3417933,,,Mono2Micro: an AI-based toolchain for evolving monolithic enterprise applications to a microservice architecture,"Mono2Micro is an AI-based toolchain that provides recommendations for decomposing legacy web applications into microservice partitions. Mono2Micro consists of a set of tools that collect static and runtime information from a monolithic application and process the information using an AI-based technique to generate recommendations for partitioning the application classes. Each partition represents a candidate microservice or a grouping of classes with similar business functionalities. Mono2Micro takes a temporo-spatial clustering approach to compute meaningful and explainable partitions. It generates two types of partition recommendations. First, it computes business-logic-seams-based partitions that represent a desired encapsulation of business functionalities. However, such a recommendation may cut across data dependencies between classes, accommodating which could require significant application updates. To address this, Mono2Micro computes natural-seams-based partitions, which respect data dependencies. We describe the set of tools that comprise Mono2Micro and illustrate them using a well-known open-source JEE application.","Anup K. Kalia,Jin Xiao,Chen Lin,Chen Lin,Saurabh Sinha,John J. Rofrano,Maja Vukovic,Debasish Banerjee",,2020
10.1109/ms.2017.440134612,,,"Migrating Enterprise Legacy Source Code to Microservices: On Multitenancy, Statefulness, and Data Consistency","Microservice migration is a promising technique to incrementally modernize monolithic legacy enterprise applications and enable them to exploit the benefits of cloud-computing environments. This article elaborates on three challenges of microservice migration: multitenancy, statefulness, and data consistency. The authors show how to identify each of these challenges in legacy code and explain refactoring and architectural pattern-based migration techniques relevant to microservice architectures. They explain how multitenancy enables microservices to be utilized by different organizations with distinctive requirements, why statefulness affects both the availability and reliability of a microservice system, and why data consistency challenges are encountered when migrating legacy code that operates on a centralized data repository to microservices operating on decentralized data repositories. They also explain the interdependencies between multitenancy, statefulness, and data consistency.","Andrei Furda,Colin J. Fidge,Olaf Zimmermann,Wayne Kelly,Alistair Barros",IEEE Software,2018
10.1109/ms.2018.2141031,,,On the Definition of Microservice Bad Smells,"Code smells and architectural smells (also called bad smells) are symptoms of poor design that can hinder code understandability and decrease maintainability. Several bad smells have been defined in the literature for both generic architectures and specific architectures. However, cloud-native applications based on microservices can be affected by other types of issues. In order to identify a set of microservice-specific bad smells, researchers collected evidence of bad practices by interviewing 72 developers with experience in developing systems based on microservices. Then, they classified the bad practices into a catalog of 11 microservice-specific bad smells frequently considered harmful by practitioners. The results can be used by practitioners and researchers as a guideline to avoid experiencing the same difficult situations in the systems they develop.","Davide Taibi,Valentina Lenarduzzi",IEEE Software,2018
10.1016/j.jss.2019.01.001,,,Architecting with microservices: A systematic mapping study,"Abstract   Context  A microservice architecture is composed of a set of small services, each running in its own process and communicating with lightweight mechanisms. Many aspects on architecting with microservices are still unexplored and existing research is still far from being crispy clear.    Objective  We aim at identifying, classifying, and evaluating the state of the art on architecting with microservices from the following perspectives: publication trends, focus of research, and potential for industrial adoption.    Method  We apply the systematic mapping methodology. We rigorously selected 103 primary studies and we defined and applied a classification framework to them for extracting key information for subsequent analysis. We synthesized the obtained data and produced a clear overview of the state of the art.    Results  This work contributes with (i) a classification framework for research studies on architecting with microservices, (ii) a systematic map of current research of the field, (iii) an evaluation of the potential for industrial adoption of research results, and (iv) a discussion of emerging findings and implications for future research.    Conclusion  This study provides a solid, rigorous, and replicable picture of the state of the art on architecting with microservices. Its results can benefit both researchers and practitioners of the field.","Paolo Di Francesco,Patricia Lago,Ivano Malavolta",Journal of Systems and Software,2019
10.3311/ppee.13925,,,A New Decomposition Method for Designing Microservices,"Many companies are migrating from monolithic architectures to microservice architectures, and they need to decompose their applications in order to create a microservices application. Therefore, the need comes for an approach that helps software architects in the decomposition process. This paper presents a new approach for decomposing monolithic application to a microservices application through analyzing the application programming interface. Our proposed decomposition methodology uses word embedding models to obtain word representations using operation names, as well as, using a hierarchical clustering algorithm to group similar operation names together in order to get suitable microservices. Also, using grid search method to find the optimal parameter values for Affinity Propagation algorithm, which was used for clustering, as well as using silhouette coefficient score to compare the performance of the clustering parameters. The decomposition approach that was introduced in this research consists of the OpenAPI specifications as an input, then extracts the operation names from the specifications and converts them into average word embedding using fastText model. Lastly the decomposition approach is grouping these operation names using Affinity Propagation algorithm. The proposed methodology presented promising results with a precision of 0.84, recall of 0.78 and F-Measure of 0.81.","Omar Al-Debagy,Peter Martinek",,2019
10.1109/cloudcom.2019.00023,,,MicroValid: A Validation Framework for Automatically Decomposed Microservices,"In a dynamic world of software development, the architectural styles are continuously evolving, adapting to new technologies and trends. Microservice architecture (MSA) is gaining adoption among industry practitioners due to its advantages compared to the monolithic architecture. Although MSA builds on the core concepts of Service Oriented Architecture (SOA), it pushes for a finer granularity, with stricter boundaries. Due to cost rationale, numerous companies choose to migrate from the monolithic style instead of developing from scratch. Recently, semi-automatic decomposition tools assist the migration process, yet a crucial part is still missing: validation. The current study focuses on providing a validation framework for microservices decomposed from monolithic applications and complete the puzzle of architectural migrations. From previous work we select quality attributes of microservices that may be assessed using static analysis. We then provide an implementation specification of the validation framework. We use five applications to evaluate our approach, and the results show that our solution is scalable while providing insightful measurements of the assessed quality attributes of microservices.","Michel Cojocaru,Alexandru Uta,Ana-Maria Oprescu",,2019
10.1002/spe.2869,,,Microservice transition and its granularity problem: A systematic mapping study,"Microservices have gained wide recognition and acceptance in software industries as an emerging architectural style for autonomic, scalable, and more reliable computing. The transition to microservices has been highly motivated by the need for better alignment of technical design decisions with improving value potentials of architectures. Despite microservices' popularity, research still lacks disciplined understanding of transition and consensus on the principles and activities underlying ""micro-ing"" architectures. In this paper, we report on a systematic mapping study that consolidates various views, approaches and activities that commonly assist in the transition to microservices. The study aims to provide a better understanding of the transition; it also contributes a working definition of the transition and technical activities underlying it. We term the transition and technical activities leading to microservice architectures as microservitization. We then shed light on a fundamental problem of microservitization: microservice granularity and reasoning about its adaptation as first-class entities. This study reviews state-of-the-art and -practice related to reasoning about microservice granularity; it reviews modelling approaches, aspects considered, guidelines and processes used to reason about microservice granularity. This study identifies opportunities for future research and development related to reasoning about microservice granularity.","Sara Hassan,Rami Bahsoon,Rick Kazman",Software - Practice and Experience,2020
10.1109/sose50414.2020.9130466,,,Extracting Microservices’ Candidates from Monolithic Applications: Interface Analysis and Evaluation Metrics Approach,"There is a migration trend toward microservices architecture coming from the monolithic applications. This research proposes a decomposition method that extracts microservices’ candidates through analyzing the application programming interface in order to extract the operations and the parameters. Then the operation names are converted into word representations using word embedding models. Next, semantically similar operations are clustered together to provide a microservice’ candidate. Additional step is to evaluate the proposed candidate using cohesion and complexity metrics. The proposed algorithm improved the decomposition approach for big applications but did not affect the decomposition of smaller applications.","Omar Al-Debagy,Peter Martinek",,2020
10.1109/icsme46990.2020.00060,,,On the Performance and Adoption of Search-Based Microservice Identification with toMicroservices,"The expensive maintenance of legacy systems leads companies to migrate such systems to microservice architectures. This migration requires the identification of system’s legacy parts to become microservices. However, the successful identification of microservices, which are promising to be adoptable in practice, requires the simultaneous satisfaction of many criteria, such as coupling, cohesion, reuse and communication overhead. Search-based microservice identification has been recently investigated to address this problem. However, state-of-the-art search-based approaches are limited as they only consider one or two criteria (namely cohesion and coupling), possibly not fulfilling the practical needs of developers. To overcome these limitations, we propose toMicroservices, a many-objective search-based approach that considers five criteria, the most cited by practitioners in recent studies. Our approach was evaluated in a real-life industrial legacy system undergoing a microservice migration process. The performance of toMicroservices was quantitatively compared to a baseline. We also gathered qualitative evidence based on developers’ perceptions, who judged the adoptability of the recommended microservices. The results show that our approach is both: (i) very similar to the most recent proposed approach on optimizing the traditional criteria of coupling and cohesion, but (ii) much better when taking into account all the five criteria. Finally, most of the microservice candidates were considered adoptable by practitioners.","Luiz Carvalho,Luiz Carvalho,Alessandro Garcia,Thelma Elita Colanzi,Wesley K. G. Assunção,Juliana Alves Pereira,Juliana Alves Pereira,Baldoino Fonseca,Márcio Garcia Ribeiro,Márcio Ribeiro,Maria Julia de Lima,Carlos José Pereira de Lucena",,2020
10.1109/icsme.2019.00081,,1906.04702,"Microservices Migration in Industry: Intentions, Strategies, and Challenges","To remain competitive in a fast changing environment, many companies started to migrate their legacy applications towards a Microservices architecture. Such extensive migration processes require careful planning and consideration of implications and challenges likewise. In this regard, hands-on experiences from industry practice are still rare. To fill this gap in scientific literature, we contribute a qualitative study on intentions, strategies, and challenges in the context of migrations to Microservices. We investigated the migration process of 14 systems across different domains and sizes by conducting 16 in-depth interviews with software professionals from 10 companies. Along with a summary of the most important findings, we present a separate discussion of each case. As primary migration drivers, maintainability and scalability were identified. Due to the high complexity of their legacy systems, most companies preferred a rewrite using current technologies over splitting up existing code bases. This was often caused by the absence of a suitable decomposition approach. As such, finding the right service cut was a major technical challenge, next to building the necessary expertise with new technologies. Organizational challenges were especially related to large, traditional companies that simultaneously established agile processes. Initiating a mindset change and ensuring smooth collaboration between teams were crucial for them. Future research on the evolution of software systems can in particular profit from the individual cases presented.","Jonas Fritzsch,Justus Bogner,Stefan Wagner,Alfred Zimmermann",IEEE International Conference on Software Maintenance and Evolution,2019
10.1109/apsec.2018.00072,,,Extracting Candidates of Microservices from Monolithic Application Code,"Technology that facilitates rapid modification of existing business applications is necessary and it has been reported that making the system more adaptable to change is the strongest driver for legacy system modernization. There has been considerable interest in service-oriented architectures or microservices which enables the system to be quickly changed. Refactoring and, in particular, re-modularization operations can be performed to repair the design of a software system. Various approaches have been proposed to support developers during the re-modularization of a software system. The common problem in these efforts is to identify from monolithic applications the candidates of microservices, i.e., the programs or data that can be turned into cohesive, standalone services; this is a tedious manual effort that requires analyzing many dimensions of software architecture views and often heavily relies on the experience and expertise of the expert performing the extraction. To solve this problem, we developed a method that identifies the candidates of microservices from the source code by using software clustering algorithm SArF with the relation of ""program groups"" and ""data"" which we defined. Our method also visualizes the extracted candidates to show the relationship between extracted candidates and the whole structure. The candidates and visualization help the developers to capture the overview of the whole system and facilitated a dialogue with customers. We report two case studies to evaluate our results in which we applied our method to an open source application and an industrial application with our results reviewed by developers.","Manabu Kamimura,Keisuke Yano,Tomomi Hatano,Akihiko Matsuo",,2018
10.5220/0007618400370047,,,Towards a Roadmap for the Migration of Legacy Software Systems to a Microservice based Architecture,"The migration of legacy software systems to a microservice based architecture is not a trivial task due to challenges and difficulties as reported in the literature. The concept of microservices mainly consists in software organized as a suite of small, modular, and independently deployed services that run on their own processes and communicate through well-defined, lightweight mechanisms to serve a business goal. However, the literature is still incipient in relation to step-by-step guidelines supporting practitioners to accomplish the migration from an existing, monolithic structure to a microservice based architecture. Goal: Discuss lessons learned from the migration of legacy software systems to microservices-based architecture. Method: We conducted two studies (a pilot and a case study) aiming at characterizing the relevants steps of such guidelines. Results: We report the steps and challenges observed during the migration reported in this study. Conclusion: We identify at least three main phases that drive the migration process.","Hugo Henrique S. da Silva,Glauco de Figueiredo Carneiro,Miguel P. Monteiro",,2019
10.1109/compcomm.2018.8781036,,,Refactoring Orchestrated Web Services into Microservices Using Decomposition Pattern,"Service-oriented architecture (SOA) is an architectural design of inter-services collaborations. In general, SOA has three major roles, including client, service provider, and service broker. To access a service usually depends on a service broker, which causes inflexibility in system modification. The software industry now focuses more on productivity, flexibility of the constant changes and continuous modifications, for which the SOA style may not be suitable. Therefore, a new microservice style is an alternative serving those needs, which means a microservice unit is more adaptable and replaceable with no ripple effects. Since the microservice architecture design is considered as a collection of the small self-contained services, each service represents a business capability and carries its own isolated data. However, how to identify microservices is still a challenging task in the business process model level. This paper proposes an alternative mean to extract the existing SOA services from the BPEL flow and refactor them into a set of relevant microservices using the decomposition pattern. In our case study, we propose how to do the service refactoring against the business domain profiles collected from the extracted vocabularies from the given business scenarios. The resulting microservices are domain specific and conform to the business capability vocabularies extracted from the given business scenarios.","Mathawee Tusjunt,Wiwat Vatanawood",,2018
10.1109/icpc52881.2021.00041,,,Weighing the Evidence: On Relationship Types in Microservice Extraction,"The microservice-based architecture – a SOA-inspired principle of dividing systems into components that communicate with each other using language-agnostic APIs – has gained increased popularity in industry. Yet, migrating a monolithic application to microservices is a challenging task. A number of automated microservice extraction techniques have been proposed to help developers with the migration complexity. These techniques, at large, construct a graph-based representation of an application and cluster its elements into service candidates. The techniques vary by their decomposition goals and, subsequently, types of relationships between application elements that they consider – structural, semantic term similarity, and evolutionary – with each technique utilizing a fixed subset and weighting of these relationship types.In this paper, we perform a multi-method exploratory study with 10 industrial practitioners to investigate (1) the applicability and usefulness of different relationships types during the microservice extraction process and (2) expectations practitioners have for tools utilizing such relationships. Our results show that practitioners often need a ""what-if"" analysis tool that simultaneously considers multiple relationship types during the extraction process and that there is no fixed way to weight these relationships. Our study also identifies organization- and application-specific considerations that lead practitioners to prefer certain relationship types over others, e.g., the age of the codebase and languages spoken in the organization. It outlines possible strategies to help developers during the extraction process, e.g., the ability to iteratively filter and customize relationships.","Lisa J. Kirby,Evelien Boerstra,Zachary J.C. Anderson,Julia Rubin,Julia Rubin",,2021
,,,"Microservices: yesterday, today, and tomorrow","Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state-of-the-art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out some potential solutions.","Nicola Dragoni,Saverio Giallorenzo,Alberto Lluch Lafuente,Manuel Mazzara,Fabrizio Montesi,Ruslan Mustafin,Larisa Safina",arXiv: Software Engineering,2016
10.1109/ms.2018.2141026,,,From Monolithic to Microservices: An Experience Report from the Banking Domain,"Microservices have seen their popularity blossoming with an explosion of concrete applications in real-life software. Several companies are currently involved in a major refactoring of their back-end systems in order to improve scalability. This article presents an experience report of a real-world case study, from the banking domain, in order to demonstrate how scalability is positively affected by reimplementing a monolithic architecture into microservices. The case study is based on the FX Core system for converting from one currency to another. FX Core is a mission-critical system of Danske Bank, the largest bank in Denmark and one of the leading financial institutions in Northern Europe.","Antonio Bucchiarone,Nicola Dragoni,Schahram Dustdar,Stephan Thordal Larsen,Stephan T. Larsen,Manuel Mazzara",IEEE Software,2018
,,,On micro-services architecture,"This paper provides an overview of micro-services architecture and implementation patterns. It continues our series of publications about M2M systems, existing and upcoming system software platforms for M2M applications. A micro-service is a lightweight and independent service that performs single functions and collaborates with other similar services using a well-defined interface. We would like to discuss the common principles behind this approach, its advantages and disadvantages as well as its possible usage in M2M applications.","Dmitry Namiot,Manfred Sneps-Sneppe",International Journal of Open Information Technologies,2014
10.18417/emisa.14.1,,,Drivers and Barriers for Microservice Adoption – A Survey among Professionals in Germany,"Microservices are an architectural style for software which currently receives a lot of attention in both industry and academia. Several companies employ microservice architectures with great success, and there is a wealth of blog posts praising their advantages. Especially so-called Internet-scale systems use them to satisfy their enormous scalability requirements and to rapidly deliver new features to their users. But microservices are not only popular with large, Internet-scale systems. Many traditional companies are also considering whether microservices are a viable option for their applications. However, these companies may have other motivations to employ microservices, and see other barriers which could prevent them from adopting microservices. Furthermore, these drivers and barriers possibly differ among industry sectors. In this article, we present the results of a survey on drivers and barriers for microservice adoption among professionals in Germany. In addition to overall drivers and barriers, we particularly focus on the use of microservices to modernize existing software, with special emphasis on implications for runtime performance and transactionality. We observe interesting differences between early adopters who emphasize scalability of their Internet-scale systems, compared to traditional companies which emphasize maintainability of their IT systems.","Holger Knoche,Wilhelm Hasselbring",,2019
10.1109/icasi.2016.7539733,,,Migrating web applications to clouds with microservice architectures,"For the recent advances of Cloud Computing technologies, cloud applications have been popularity for their rich set of features. Therefore, their practical use for promoting business values can be expected. As such, cloud applications are recognized as a trend for the next generation of existing Web applications, and hence how to migrate these Web applications to the clouds becomes a desired field in the literature. For this need, we present a migration method that employs the well-known microservice architectures to support an effective migration of Web applications into the clouds.","Jyhjong Lin,Lendy Chaoyu Lin,Shiche Huang",,2016
10.1109/ispdc.2019.00021,,,Attributes Assessing the Quality of Microservices Automatically Decomposed from Monolithic Applications,"The architectural styles in the world of software development are constantly evolving. Recently the microservice architecture is gaining more and more traction, building on concepts of Service Oriented Architecture (SOA) and steering further away from monolithic architectures. Emerged from agile communities, the microservice oriented architecture implies a number of small-sized microservices independently deployable. The adoption of microservices as the base for creating enterprise applications is certain, yet many companies intend to migrate from the old monolithic style instead of creating new products mainly due to cost related implications as well as challenging and complex tasks. Several tools and approaches for the semi-automatic decomposition of monolithic applications to microservices have emerged, yet many of them still struggle to verify the result of such process, the architect being indispensable for assessing the output microservices. Although this area is intensely studied, no unanimously accepted and clear guidelines for defining a good microservice exist. This survey focuses on providing a comprehensive and broadly applicable set of quality assessment criteria for microservices resulted from semi-automatic migration tools or techniques. Our study aligns with industry requirements, including a case study which further validates our set of quality attributes. In the refinement step of the quality attributes set, the prospect of automating the process of validation is also discussed.","Michel-Daniel Cojocaru,Ana Oprescu,Alexandru Uta",,2019
,,,Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith,,Sam Newman,,2020
10.1016/j.infsof.2022.106996,,,Improving microservices extraction using evolutionary search,"Microservices constitute a modern style of building software applications as collections of small, cohesive, and loosely coupled services, i.e. , modules, that are developed, deployed, and scaled independently. The migration from legacy systems towards the microservice-based architecture is not a trivial task. It is still manual, time-consuming, error-prone and subsequently costly. The most critical and challenging issue is the cost-effective identification of microservices boundaries that ensure adequate granularity and cohesiveness. To address this problem, we introduce in this paper a novel approach, named MSExtractor , that formulates microservices identification as a multi-objective optimization problem. The proposed solution aims at decomposing a legacy application into a set of cohesive, loosely-coupled and coarse-grained services. We employ the Indicator-Based Evolutionary Algorithm (IBEA) to drive a search process towards optimal microservices identification while considering structural and semantic dependencies in the source code. We conduct an empirical evaluation on a benchmark of seven software systems to assess the efficiency of our approach. Results show that MSExtractor is able to carry out an effective identification of relevant microservice candidates and outperforms three other existing approaches. In this paper, we show that MSExtractor is able to extract cohesive and loosely coupled services with higher performance than three other considered methods. However, we advocate that while automated microservices identification approaches are very helpful, the role of the human experts remains crucial to validate and calibrate the extracted microservices.","Khaled Sellami,Ali Ouni,Mohamed Aymen Saied,Salah Bouktif,Mohamed Wiem Mkaouer",Information & Software Technology,2022
10.1109/icsa-c50368.2020.00015,,,Towards Identifying Microservice Candidates from Business Rules Implemented in Stored Procedures,"During the 1980 and 1990’s decades, relational database management systems arose as an alternative to implement and store application business logic due to its robustness. Many of those legacy systems suffer from several problems such as low scalability, database vendor lock-in, and complex maintenance and evolution. With the success of lightweight virtualization techniques and new distributed architectures, mainly the microservices, companies are migrating legacy systems to this architectural style. Although several studies have proposed migration processes and reported migration experience to microservices, to the best of our knowledge, none of them has addressed systems whose business rules are implemented in database artifacts, particularly stored procedures. Therefore, this paper presents a process to identify microservice candidates from application business rules implemented in stored procedures. We applied the process to a real large scale system, for which 357 business rules were mapped and 13 microservices were identified. In addition, the process helped to find out many duplicated pieces of code, thus also improving the system maintainability.","Marx Haron Gomes Barbosa,Marx Haron Gomes Barbosa,Paulo Henrique M.Maia,Paulo Henrique M. Maia",,2020
,,,A curated Dataset of Microservices-Based Systems,"Microservices based architectures are based on a set of modular, independent and fault-tolerant services. In recent years, the software engineering community presented studies investigating potential, recurrent, effective architectural patterns in microservices-based architectures, as they are very essential to maintain and scale microservice-based systems. Indeed, the organizational structure of such systems should be reflected in so-called microservice architecture patterns, that best fit the projects and development teams needs. However, there is a lack of public repositories sharing open sources projects microservices patterns and practices, which could be beneficial for teaching purposes and future research investigations. This paper tries to fill this gap, by sharing a dataset, having a first curated list microservice-based projects. Specifically, the dataset is composed of 20 open-source projects, all using specific microservice architecture patterns. Moreover, the dataset also reports information about inter-service calls or dependencies of the aforementioned projects. For the analysis, we used two different tools (1) SLOCcount and (2) MicroDepGraph to get different parameters for the microservice dataset. Both the microservice dataset and analysis tool are publicly available online. We believe that this dataset will be highly used by the research community for understanding more about microservices architectural and dependencies patterns, enabling researchers to compare results on common projects.","Mohammad Imranur Rahman,Mohammad Imranur,Mohammad Imranur Rahman,Rahman,Sebastiano Panichella,Davide Taibi",arXiv: Software Engineering,2019
10.1007/978-981-16-7389-4_43,,,Best Practices and Strategy for the Migration of Service-Oriented Architecture-Based Applications to Microservices Architecture,"Microservices has become a buzzword in IT, and large enterprise companies like Netflix, Twitter, Spotify, and others have begun to develop their applications in this new architectural style. To take advantage of the numerous benefits of the new design, a few firms have begun migrating their traditional monolithic, and SOA-based applications to microservices. Software architects, on the other hand, are uncertain about whether or not to migrate to this new style since they are unclear of the benefits and drawbacks of doing so. Migration of any application from one architecture to another exhibits different challenges like which portion of the code to be migrated, the migration approach to be followed etc. With our experience in migrating the existing SOA-based applications to microservices, we propose the migration strategy as well as the best practices in creating new microservices or migrating existing applications to microservices architecture. We consider a standard Web-based application and demonstrate the proposed migration strategy. The future research directions are also presented.","Vinay Raj,K. Srinivasa Reddy",Algorithms for intelligent systems,2022
10.1007/s00607-021-01002-z,,,Detector-based component model abstraction for microservice-based systems,"One of the chief problems in software architecture is avoiding architecture model drift and erosion in all kinds of complex software systems. Microservice-based systems introduce new challenges in this context, as they often use a large variety of technologies in their latest iteration, and are changed and released very frequently. Existing solutions that can be used to reconstruct architecture models fall short in addressing these new challenges, as they cannot easily cope with continuous evolution, their accuracy is too low, and highly polyglot settings are not supported well. In this work, we report on a research study aiming to design a highly accurate architecture model abstraction approach for comprehending component architecture models of highly polyglot systems that can cope with continuous evolution. After analyzing the results of related studies, we found two possible architecture model abstraction approaches that meet the requirements of our study: an opportunistic, and a reusable semi-automatic detector-based approach. We have conducted an empirical case study for validation and comparison of the two approaches. We conclude that both detector approaches are feasible. In our case study, the reusable approach breaks even in terms of time and effort needed for establishing reuse, if modest reuse of detectors is possible, and is producing slightly more high quality and evolution-stable solutions than the opportunistic approach.","Evangelos Ntentos,Uwe Zdun,Konstantinos Plakidas,Patric Genfer,Sebastian Geiger,Sebastian Geiger,Sebastian Meixner,Wilhelm Hasselbring",Computing,2021
10.1109/issrew53611.2021.00056,,,Migration of Monoliths through the Synthesis of Microservices using Combinatorial Optimization,"Microservices are an emerging architectural style that is gaining a growing interest from companies and research. They are small, distributed, autonomous and loosely coupled services that are deployed independently and work together by communicating through lightweight protocols. Microservices are easy to update, scale, deploy, and reduce the time-to-market thanks to continuous delivery and DevOps. Several existing systems, in contrast, are difficult to maintain, evolve, and scale. For these reasons, microservices are the ideal candidates for the refactoring and modernization of long-lived monolithic systems. However, the migration process is a complex, time-consuming and error-prone task that needs the support of appropriate tools to assist software designers and programmers from the extraction of a proper architecture to the implementation of the novel microservices. This paper proposes a possible solution for the automated decomposition of a monolithic system into microservices, which exploits combinatorial optimization techniques to manage the decomposition. Our proposal covers the whole decomposition process, from the microservice architecture definition to the generation of the code of the microservices and their APIs, in order to assist developers and ensure by construction the correct behavior of the refactored system.","Gianluca Filippone,Marco Autili,Fabrizio Rossi,Massimo Tivoli",,2021
10.1109/icws53863.2021.00104,,,Monolith to Microservice Candidates using Business Functionality Inference,"In this paper, we propose a novel approach for monolith decomposition, that maps the implementation structure of a monolith application to a functional structure that in turn can be mapped to business functionality. First, we infer the classes in the monolith application that are distinctively representative of the business functionality in the application domain. This is done using formal concept analysis on statically determined code flow structures in a completely automated manner. Then, we apply a clustering technique, guided by the inferred representatives, on the classes belonging to the monolith to group them into different types of partitions, mainly: 1) functional groups representing microservice candidates, 2) a utility class group, and 3) a group of classes that require significant refactoring to enable a clean microservice architecture. This results in microservice candidates that are naturally aligned with the different business functions exposed by the application. A detailed evaluation on four publicly available applications show that our approach is able to determine better quality microservice candidates when compared to other existing state of the art techniques. We also conclusively show that clustering quality metrics like modularity are not reliable indicators of microservice candidate goodness.","Shivali Agarwal,Raunak Sinha,Giriprasad Sridhara,Pratap Das,Utkarsh Desai,Srikanth G. Tamilselvam,Amith Singhee,Hiroaki Nakamuro",,2021
10.1109/ici2st51859.2021.00027,,,Monoliths to microservices - Migration Problems and Challenges: A SMS,"There are currently many applications that companies have accumulated over the years to leverage the operation of their businesses, however, over the years these applications have fallen into obsolescence. Most of these applications have been built following a monolith architectural style. With today’s great technological advances and for companies to remain competitive, many of these applications need to be migrated and/or modernized to take advantage of current technologies. The process of migrating from a monolithic application to a microservice is a challenging process and there are few reported successful experiences. The objective of this paper is to contribute to the findings of problems and challenges reported in scientific literature, that companies have faced when migrating a monolithic application to a microservices architecture.","Victor Velepucha,Pamela Flores",,2021
10.1016/j.infsof.2020.106449,,,Understanding and addressing quality attributes of microservices architecture: A Systematic literature review,"Abstract   Context: As a rapidly adopted architectural style in software engineering, Microservices Architecture (MSA) advocates implementing small-scale and independently distributed services, rather than binding all functions into one monolith. Although many initiatives have contributed to the quality improvement of microservices-based systems, there is still a lack of a systematic understanding of the Quality Attributes (QAs) associated with MSA.  Objective: This study aims to investigate the evidence-based state-of-the-art of QAs of microservices-based systems.  Method: We carried out a Systematic Literature Review (SLR) to identify and synthesize the relevant studies that report evidence related to QAs of MSA.  Results: Based on the data extracted from the 72 selected primary studies, we portray an overview of the six identified QAs most concerned in MSA, scalability, performance, availability, monitorability, security, and testability. We identify 19 tactics that architecturally address the critical QAs in MSA, including two tactics for scalability, four for performance, four for availability, four for monitorability, three for security, and two for testability.  Conclusion: This SLR concludes that for MSA-based systems: 1) Although scalability is the commonly acknowledged benefit of MSA, it is still an indispensable concern among the identified QAs, especially when trading-off with other QAs, e.g., performance. Apart from the six identified QAs in this study, other QAs for MSA like maintainability need more attention for effective improvement and evaluation in the future. 3) Practitioners need to carefully make the decision of migrating to MSA based on the return on investment, since this architectural style additionally cause some pains in practice.","Shanshan Li,Shanshan Li,Shanshan Li,He Zhang,He Zhang,Zijia Jia,Chenxing Zhong,Cheng Zhang,Cheng Zhang,Zhihao Shan,Jinfeng Shen,Muhammad Ali Babar",Information & Software Technology,2020
10.1007/978-3-030-14070-0_81,,,Strategies Reported in the Literature to Migrate to Microservices Based Architecture,"Context: Microservice-oriented architecture relies on the implementation and deployment of small and autonomous microservices, rather than implementing the functionalities in one unique module to be deployed. They have been adopted as a solution to the shortcomings of the monolithic architecture such as lack of flexibility. Goal: This paper discusses lessons learned and challenges reported in the literature regarding the migration of legacy monolithic software systems to microservices based architecture. Method: We performed an automated search targeting public repositories to accomplish the stated goal. Results: Based on the evidence provided by 12 studies, we classified main findings in lessons learned related to the migration, as well as associated difficulties and challenges. Conclusions: the guidelines to migrate to microservices based architecture are maturing/evolving and the literature has pinpointed issues that deserve further investigation.","Heleno Cardoso da Silva Filho,Glauco de Figueiredo Carneiro",,2019
10.1109/access.2021.3068837,,,A Roadmap for Migration System-Architecture Decision by Neutrosophic-ANP and Benchmark for Enterprise Resource Planning Systems,"The selection of the system-architecture is critical step in software-engineering lifecycle. Unfortunately, the selecting a suitable architecture is a hard mission. The difficulty of the adopting architecture increases in inconsistence case as in SOA and MSA. The paper answers “when architecture transform”, “to which architecture migrate” and “how”. The paper addresses the lack of evaluation ERPs in post-implementation phase. The paper provides static and dynamic analysis for monolith, SOA and MSA by numerical-comparison and Benchmark. This paper proposes a roadmap for migration-architecture. The roadmap consists of flowchart of migration and migration-decision model that is supported with criteria of evaluation form for assessing system’s baseline and making a consistence decision by Neutrosophic-ANP. Because of the dependency between factors of information system evolution, ANP is used. Furthermore, Neutrosophic set is selected because its accuracy in inconsistence. Benchmark assesses OpenBravoERP, Odoo12 and Metasfresh5.144 to represent monolith, SOA and MSA respectively. Benchmark assesses performance, time to the market, stability, future proof, network issue and cost. They are tested based on scenario tests which grantee that transactions are executed within more than one module of ERPS, simulates real business’s procedures, huge number of records and concurrent load by virtual users. The proposed model and benchmark help “Hitac’ enterprise in two decisions for its expansion-plan in COVID-19 crisis. The numerical steps of this case-study are provided. Most published papers and literatures about Microservices are not empirical. The main paper’s result is filling this gap by a one of the empirical aspects with an academic study support.","Amany A. Slamaa,Haitham A. El-Ghareeb,Ahmed Aboelfetouh Saleh",IEEE Access,2021
10.1145/3475061.3475086,,,Refactoring Java Monoliths into Executable Microservice-Based Applications,"In the last few years we have been seeing a drastic change in the way software is developed. Large-scale software projects are being assembled by a flexible composition of many (small) components possibly written in different programming languages and deployed anywhere in the cloud – the so-called microservice-based applications.  The dramatic growth in popularity of microservice-based applications has pushed several companies to apply major refactorings to their software systems. However, this is a challenging task that may take several months or even years.  We propose a methodology to automatically evolve a Java monolithic application into a microservice-based one. Our methodology receives the Java code and a proposition of microservices and refactors the original classes to make each microservice independent. Our methodology creates an API for each method call to classes that are in other services. The database entities are also refactored to be included in the corresponding service. The initial evaluation shows that our tool can successfully refactor 80% of the applications tested.","Francisco Freitas,Andre L. Ferreira,Jácome Cunha,Jácome Cunha",,2021
10.1002/spe.2956,,,Migrating production monolithic systems to microservices using aspect oriented programming,,"Augusto Flávio A. A. Freire,Américo Sampaio,Luis Heustakio L. Carvalho,Otávio Medeiros,Nabor C. Mendonça",Software - Practice and Experience,2021
10.1007/978-3-030-39306-9_2,,,A Model-Driven Approach Towards Automatic Migration to Microservices,"Microservices have received and are still receiving an increasing attention, both from academia and the industrial world. To guarantee scalability and availability while developing modern software systems, microservices allow developers to realize complex systems as a set of small services that operate independently and that are easy to maintain and evolve. Migration from monolithic applications to microservices-based application is a challenging task that very often it is done manually by the developers taking into account the main business functionalities of the input application and without a supporting tool. In this paper, we present a model-driven approach for the automatic migration to microservices. The approach is implemented by means of JetBrains MPS, a text-based metamodelling framework, and validated using a first migration example from a Java-based application to Jolie - a programming language for defining microservices.","Antonio Bucchiarone,Kemal Soysal,Claudio Guidi",,2019
,,,Does migrate a monolithic system to microservices decreases the technical debt,"Background. The migration from monolithic systems to microservices involves deep refactoring of the systems. Therefore, the migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed-up the migration itself, but also because of the need to release new features. Objective. We monitored the Technical Debt of a small and medium enterprise while migrating a legacy monolithic system to an ecosystem of microservices to analyze changes in the code technical debt before and after the migration to microservices. Method. We conducted a case study analyzing more than four years of the history of a big project (280K Lines of Code) where two teams extracted five business processes from the monolithic system as microservices, by first analyzing the Technical Debt with SonarQube and then performing a qualitative study with the developers to understand the perceived quality of the system and the motivation for eventually postponed activities. Result. The development of microservices helps to reduce the Technical Debt in the long run. Despite an initial spike in the Technical Debt, due to the development of the new microservice, after a relatively short period, the Technical Debt tends to grow slower than in the monolithic system.","Nyyti Saarimäki,Francesco Lomio,Valentina Lenarduzzi,Davide Taibi",arXiv: Software Engineering,2019
10.5937/jemc2102152s,,,Review of methods for migrating software systems to microservices architecture,"Majority of software systems in business use, known as legacy systems, have monolithic structure hard to maintain and upgrade with new features. The most common option to overcome this situation is reengineering of existing software systems, which can be perform in different ways and with different outcomes. One of the recent most popular approaches is migration to microservices architectures, which makes distribution of software functionalities in small and independent units possible. Each unit, called microservice is self-contained and independent, which makes system manipulation and modification easier. Several methods for migration to microservice architecture have recently been proposed. This article presents a review of methods for migrating existing systems towards microservices. In addition, this article presents software artifacts affected by migration methods and used algorithms. Implications and benefits of the presented study, as well as validity issues are discussed, followed with concluding remarks and future research directions.","Aleksandra Stojkov,Željko Stojanov,Zeljko Stojanov",,2021
10.1002/spe.2974,,,"The μTOSCA toolchain: Mining, analyzing, and refactoring microservice‐based architectures",,"Jacopo Soldani,Giuseppe Muntoni,Davide Neri,Antonio Brogi",Software - Practice and Experience,2021
10.1007/978-3-030-49418-6_21,,,A Modeling Method for Systematic Architecture Reconstruction of Microservice-Based Software Systems,"Microservice Architecture (MSA) is an approach to architecting service-based software systems, which aims for decreasing service coupling to enable independent service development and deployment. Consequently, the adoption of MSA is expected to particularly benefit the scalability, maintainability, and reliability of monolithic systems. However, MSA adoption also increases architectural complexity in service design, implementation, and operation. As a result, Software Architecture Reconstruction (SAR) of microservice architectures is aggravated. This paper presents a modeling method that systematizes SAR of microservice architectures with the goal to facilitate its execution. The method yields reconstruction models for certain architecture viewpoints in MSA to enable efficient architecture analysis. We validate the method’s applicability by means of a case study architecture and the assessment of its risk in technical debt using derived reconstruction models.","Florian Rademacher,Sabine Sachweh,Albert Zündorf",,2020
10.1007/978-3-030-45989-5_12,,,A Reconfigurable Microservice-Based Migration Technique for IoT Systems,"An Internet of Things (IoT) system is often an integration of a large number of hardware and software modules, which are expected to be easily replaced or reconfigured in order to cater for quickly-changing environments and requirements. With the popularity of microservices, people have attempted to introduce the microservice architecture to IoT systems, while paid little attention to the connectivity between the decomposed microservices, resulting in poor reconfigurability of the resulting system. In this paper, we propose a reconfigurable microservice-based migration technique for IoT systems, which first decomposes an IoT system as a set of microservices and then introduces variation contexts to make the decomposed microservices reconfigurable. We have conducted a case study on an open-source real-life unmanned aerial vehicle (UAV) system. The results demonstrate that the migrated UAV system can be dynamically reconfigured to handle various run-time changes.","Chang-ai Sun,Jing Wang,Jing Wang,Jing Guo,Zhen Wang,Zhen Wang,Zhen Wang,Zhen Wang,Li Duan,Li Duan,Li Duan,Li Duan",,2020
10.1007/978-3-030-32475-9_20,,,Migration to Microservices: Barriers and Solutions,"Microservices architecture (MSA) has been emerged over the past few years. Despite standardization efforts, migrating large-scale legacy applications into microservices architecture remains challenging. This study presents the results of seventeen interviews about obstacles and suggested solutions in migration to microservices. We analyzed the results of interviews using Jobs-to-be-done framework in literature and classified the barriers into three categories—inertia, anxiety and context. This work provides a categorization and a framework to overcome the barriers based on the advises of experts in this field. The results can be a reference for future research directions and advanced migration solutions.","Javad Ghofrani,Javad Ghofrani,Arezoo Bozorgmehr",,2019
10.1109/icsa47634.2020.00021,,,Automated Microservice Identification in Legacy Systems with Functional and Non-Functional Metrics,"Since microservice has merged as a promising architectural style with advantages in maintainability, scalability, evolvability, etc., increasing companies choose to restructure their legacy monolithic software systems as the microservice architecture. However, it is quite a challenge to properly partitioning the systems into suitable parts as microservices. Most approaches perform microservices identification from a function-splitting perspective and with sufficient legacy software artifacts. That may be not realistic in industrial practices and possibly results in generating unexpected microservices. To address this, we proposed an automated microservice identification (AMI) approach that extracts microservices from the execution and performance logs without providing documentation, models or source codes, while taking both functional and non-functional metrics into considerations. Our work firstly collects logs from the executable legacy system. Then, controller objects (COs) are identified as the key objects to converge strongly related subordinate objects (SOs). Subsequently, the relation between each pair of CO and SO is evaluated by a relation matrix from both the functional and non-functional perspective. We ultimately cluster classes(objects) into the microservices by optimizing the multi-objective of high-cohesion-low-coupling and load balance. The usefulness of the proposed approach is illustrated by applying to a case study.","Yukun Zhang,Bo Liu,Liyun Dai,Kang Chen,Xuelian Cao",,2020
10.1007/s00450-019-00414-9,,,Requirements for a model-driven cloud-native migration of monolithic web-based applications,"With the emergence of cloud-native applications, the question arises how existing, often monolithic, applications can be migrated to this new paradigm. The main migration challenges are the decomposition of an application into fine-grained components and the introduction of cloud computing paradigms. With complex existing applications the migration is difficult. A structured and tool-supported approach would facilitate the migration process, which is why this paper proposes a model-driven engineering based approach. As a basis, this paper derives and presents requirements for such an approach from the literature on the one hand and a migration case study on the other. The requirements are specifically targeted at the necessary models, but also consider the overall approach. The necessities for the realization of a model-driven cloud-native migration approach are shown and remaining challenges are discussed.","Robin Lichtenthäler,Mike Prechtl,Christoph Schwille,Tobias Schwartz,Pascal Cezanne,Guido Wirtz",,2019
10.1109/apsecw.2017.33,,,Understanding Quality Attributes in Microservice Architecture,"As a prevalent architectural style, microservice architecture overcomes the challenges of monolithic architecture and achieves better quality by implementing small-scale microservice, rather than binding all functions into one monolith. Welldesigned microservice architecture with better quality relies on clear understanding of related quality attributes. However, current understanding of quality attributes in microservice architecture is deficient and not comprehensive. In this study, we aim to construct knowledge of quality attributes in architecture through a Systematic Literature Review (SLR), the exploratory case study and the explanatory survey. By analyzing the influential factors and the corresponding tactics of related quality attributes, our research is aimed at providing a comprehensive guide on quality improvement in microservice architecture.","Shanshan Li,Shanshan Li,Shanshan Li",,2017
10.1007/978-981-15-9671-1_9,,,Partial Migration for Re-architecting a Cloud Native Monolithic Application into Microservices and FaaS,"Software development paradigm is transitioning from monolithic architecture to microservices and serverless architecture. Keeping monolithic application as a single large unit of scale is a threat for its agility, testability and maintainability. Complete migration of a monolithic application to microservice or serverless architecture poses additional challenges. Design and development of microservices is complex and cumbersome in comparison to monoliths. As number of microservices increase, their management also becomes challenging. Using serverless platforms can offer considerable savings, however it doesn’t work for all types of workload patterns. Many a times, it may be more expensive in comparison to dedicated server deployments, particularly when application workload scales significantly. In this paper, we propose partial migration of monolith application into microservices and serverless services. For the purposes of refactoring, we use web access log data of monolith application. Our proposed architecture model is based on unsupervised learning algorithm and aims to optimize the resource utilization and throughput of an application by identifying the modules having different scalability and resource requirements. This facilitates segregation of services of a monolith application into monolith-microservice-serverless. We have applied our proposed approach on a Teachers Feedback monolith application and presented the results.","Deepali Bajaj,Urmil Bharti,Anita Goel,Anita Goel,S. C. Gupta,Shashank Gupta",,2020
,,,Optimizing Inter-Service Communication Between Microservices,,Martin Storø Nyfløtt,,2017
10.1016/j.jss.2021.111014,,,Deployment and communication patterns in microservice architectures: A systematic literature review,"Abstract   Context:  Microservice is an architectural style that separates large systems into small functional units to provide better modularity. A key challenge of microservice architecture design frequently discussed in the literature is the identification and decomposition of the service modules. Besides this, two other key challenges can be identified, including the deployment of the modules on the corresponding execution platform, and adopted communication patterns.    Objective:  This study aims to identify and describe the reported deployment approaches, and the communication platforms for microservices in the current literature. Furthermore, we aim to describe the identified obstacles of these approaches as well as the corresponding research directions.    Method:  A systematic literature review (SLR) is conducted using a multiphase study selection process in which we reviewed a total of 239 papers. Among these, we selected 38 of them as primary studies related to the described research questions.    Results:  Based on our study, we could identify three types of deployment approaches and seven different communication patterns. Moreover, we have identified eight challenges related to the deployment and six challenges related to the communication concerns.    Conclusion:  Our study shows that in addition to the identification of modules, the deployment and communication approaches are equally crucial for a successful application of the microservice architecture style. Various deployment approaches and communication patterns appear to be useful for different contexts. The identified research directions in the literature study show that still more research is needed to cope with the current challenges.","Isil Karabey Aksakalli,Işıl Karabey Aksakalli,Turgay Çelik,Ahmet Burak Can,Bedir Tekinerdogan",Journal of Systems and Software,2021
10.1007/s10664-021-09999-9,,,Industry practices and challenges for the evolvability assurance of microservices,"Microservices as a lightweight and decentralized architectural style with fine-grained services promise several beneficial characteristics for sustainable long-term software evolution. Success stories from early adopters like Netflix, Amazon, or Spotify have demonstrated that it is possible to achieve a high degree of flexibility and evolvability with these systems. However, the described advantageous characteristics offer no concrete guidance and little is known about evolvability assurance processes for microservices in industry as well as challenges in this area. Insights into the current state of practice are a very important prerequisite for relevant research in this field. We therefore wanted to explore how practitioners structure the evolvability assurance processes for microservices, what tools, metrics, and patterns they use, and what challenges they perceive for the evolvability of their systems. We first conducted 17 semi-structured interviews and discussed 14 different microservice-based systems and their assurance processes with software professionals from 10 companies. Afterwards, we performed a systematic grey literature review (GLR) and used the created interview coding system to analyze 295 practitioner online resources. The combined analysis revealed the importance of finding a sensible balance between decentralization and standardization. Guidelines like architectural principles were seen as valuable to ensure a base consistency for evolvability and specialized test automation was a prevalent theme. Source code quality was the primary target for the usage of tools and metrics for our interview participants, while testing tools and productivity metrics were the focus of our GLR resources. In both studies, practitioners did not mention architectural or service-oriented tools and metrics, even though the most crucial challenges like Service Cutting or Microservices Integration were of an architectural nature. Practitioners relied on guidelines, standardization, or patterns like Event-Driven Messaging to partially address some reported evolvability challenges. However, specialized techniques, tools, and metrics are needed to support industry with the continuous evaluation of service granularity and dependencies. Future microservices research in the areas of maintenance, evolution, and technical debt should take our findings and the reported industry sentiments into account.","Justus Bogner,Jonas Fritzsch,Stefan Wagner,Alfred Zimmermann",Empirical Software Engineering,2021
10.5381/jot.2021.20.2.a3,,,Migration from Monolith to Microservices: Benchmarking a Case Study.,,"Nicholas Bjørndal,Manuel Mazzara,Antonio Bucchiarone,Nicola Dragoni,Schahram Dustdar",The Journal of Object Technology,2021
10.1109/icsa-c52384.2021.00015,,,Monolith Modularization Towards Microservices: Refactoring and Performance Trade-offs,"The agility inherent to today’s business promotes the definition of software architectures where the business entities are decoupled into modules and/or services. However, there are advantages in having a rich domain model, where domain entities are tightly connected, because it fosters reuse. On the other hand, the split of the business logic into modules and its encapsulation through well-defined interfaces introduces a cost in terms of performance. In this paper we analyze the impact of migrating a rich domain object into a modular architecture, both in terms of the development cost associated with the refactoring, and the performance cost associated with the execution. Current state of the art analyses the migration of monolith systems to a microservices architecture, but we observed that migration effort and performance issues are already relevant in the migration to a modular monolith.","Nuno Goncalves,Diogo Faustino,Ana Maria Silva,António Rito Silva,Manuel Portela",,2021
10.1145/3457913.3457939,,,A Feature Table approach to decomposing monolithic applications into microservices,"Microservice architecture refers to the use of numerous small-scale and independently deployed services, instead of encapsulating all functions into one monolith. It has been a challenge in software engineering to decompose a monolithic system into smaller parts. In this paper, we propose the Feature Table approach, a structured approach to service decomposition based on the correlation between functional features and microservices: (1) we defined the concept of Feature Cards and 12 instances of such cards; (2) we formulated Decomposition Rules to decompose monolithic applications; (3) we designed the Feature Table Analysis Tool to provide semi-automatic analysis for identification of microservices; and (4) we formulated Mapping Rules to help developers implement microservice candidates. We performed a case study on Cargo Tracking System to validate our microservice-oriented decomposition approach. Cargo Tracking System is a typical case that has been decomposed by other related methods (dataflow-driven approach, Service Cutter, and API Analysis). Through comparison with the related methods in terms of specific coupling and cohesion metrics, the results show that the proposed Feature Table approach can deliver more reasonable microservice candidates, which are feasible in implementation with semi-automatic support.","Yuyang Wei,Yijun Yu,Minxue Pan,Tian Zhang",,2020
10.1109/icsa-c50368.2020.00013,,,A Lightweight Architecture Analysis of a Monolithic Messaging Gateway,Background: The Enterprise Messaging Gateway(EMG) from Infoflex Connect (ICAB) is a monolithic system used to deliver mobile text messages (SMS) world-wide. The companies using it have diverse requ ...,"Daniel Brahneborg,Wasif Afzal",,2020
10.1007/978-3-030-58923-3_3,,,Monolith Migration Complexity Tuning Through the Application of Microservices Patterns,"The microservices architecture has become mainstream for the development of business applications because it supports the adaptation of scalability to the type of demand, but, most importantly, because it fosters an agile development process based on small teams focused on the product. Therefore, there is the need to migrate the existing monolith systems to microservices. Current approaches to the identification of candidate microservices in a monolith neglect the cost of redesigning the monolith functionality due to the impact of the CAP theorem. In this paper we propose a redesign process, guided by a set of complexity metrics, that allows the software architect to analyse and redesign the monolith functionality given a candidate decomposition. Both, the redesign process and the metrics are evaluated in the context of candidate decompositions of two monolith systems.","João F. Almeida,João Franscisco Almeida,Ana Maria Silva,António Rito Silva,António Rito Silva",,2020
10.1109/icws49710.2020.00021,,,On the Maintenance of a Scientific Application based on Microservices: an Experience Report,"Microservices Architecture has been adopted by several companies to develop applications and replace monolithic ones. Several works point out that this approach supports the design of maintainable software systems. However, none of them presents a quantitative empirical study on the extent of the maintenance support in a real-world application. This work assesses how Microservices Architecture supports software maintenance through an empirical quantitative study of a scientific application built from scratch. We collected data from January 2016 (the beginning of the project) to December 2019, and analyzed 19 microservices, 34 repositories, and 15,408 commits. Then, we present the lessons learned during the project that allowed reaching the assessment results. Our findings may assist practitioners in making architectural decisions and pointing out research opportunities for academics.","Leonardo P. Tizzei,Leonardo Guerreiro Azevedo,Elton Soares,Elton Soares,Raphael Melo Thiago,Rodrigo Costa,Rodrigo Costa",,2020
10.1145/3338840.3355659,,,Case study on data communication in microservice architecture,"Microservice Architecture is becoming a design standard for modern cloud-based software systems. However, data communication management remains a challenge. This is especially apparent when migrating from an existing monolithic system into microservices. In this paper, we report on data synchronization and improvement of the data-source performance. We faced these challenges in production-level development. Two case studies illustrate and describe our approach. To address data synchronization we propose using an automated data streaming system between databases. To improve the performance of a data-source we introduced a solution with the distributed cache. We discuss the balance between the performance and coupling and point out situations where our architectures are appropriate.","Antonin Smid,Ruolin Wang,Ruolin Wang,Tomas Cerny",,2019
,,,Microservice Testing Approaches: A Systematic Literature Review,"Testing is a crucial part of each code development method to which organizations devote extensive time and effort. The ever-changing industry needs of business necessitate that experts adopt and support themselves to meet the requirements in microservice testing, and in the process of doing so, contribute escalation to newer approaches and essential techniques of architecture in microservice testing from the perspective of microservice testing, the advancement of “microservice” is the result of such an activity to make the testing quality better and its impact penetrates down to the quality assurance teams. Working on testing microservice has become a newer structure of this testing architecture. This study explains the challenges that the testing world has to deal with and the effective strategies that can be predicted to overcome them while testing for applications and its design with a microservice testing approaches. This study can also serve as a guide to anyone who wants apparition into microservices and would like to know more about microservice. Testing approaches that can be developed and successfully applied while working within such a landscape. However, one of the major advantages of using microservice that it offers, efficient, flexible, effective, reusability mechanism. Furthermore, it is a secure way to reduce the development and testing time and cost. The security, performance, traceability, compatibility, complexity, effectiveness and scalability become some of the major concerns when testing approaches, frameworks, tools and models are applied for each microservice repository and no previous research addresses these concerns. In this review, we present some testing approaches, frameworks, tools and models to address all these concerns.","Israr Ghani,Wan M.N. Wan-Kadir,Ahmad Mustafa,Muhammad Imran Babir",International Journal of Integrated Engineering,2019
10.1007/978-3-030-32022-5_9,,,Migration of Monolithic Applications Towards Microservices Under the Vision of the Information Hiding Principle: A Systematic Mapping Study,"Organizations throughout time accumulate applications, which, given their old age, are generally designed in monolithic architecture. Given technological advances, enterprise has the necessity to modernize these applications, being the migration from a monolithic architecture towards microservice architecture a good alternative, however according to our research many failed attempts were found. We performed a Systematic Mapping Study in order to obtain studies to show how to migrate or modernize monolithic applications towards microservices based on some principle of Software Engineering. As a result, we found that there are different types of approaches of studies, such as: (a) solution proposals, (b) experience reports, (c) validations research and (d) opinion articles. Between the studies found, there are no studies related to migration process that is based on a Software Engineering principle, nor the Information Hiding Principle. This research indicates that there is a lack of a theoretical foundation with guidelines on how to perform a decomposition of a monolithic application towards microservices. Given this gap, we propose to migrate a monolithic application to microservices following the principles of the Information Hiding Principle.","Victor Velepucha,Pamela Flores,Jenny Torres",,2019
10.1109/tsc.2018.2889087,,,Microservices: Migration of a Mission Critical System,"An increasing interest is growing around the idea of microservices and the promise of improving scalability when compared to monolithic systems. Several companies are evaluating pros and cons of a complex migration. In particular, financial institutions are positioned in a difficult situation due to the economic climate and the appearance of agile competitors that can navigate in a more flexible legal framework and started their business since day one with more agile architectures and without being bounded to outdated technological standard. In this paper, we present a real world case study in order to demonstrate how scalability is positively affected by re-implementing a monolithic architecture (MA) into a microservices architecture (MSA). The case study is based on the FX Core system, a mission critical system of Danske Bank, the largest bank in Denmark and one of the leading financial institutions in Northern Europe. The technical problem that has been addressed and solved in this paper is the identification of a repeatable migration process that can be used to convert a real world Monolithic architecture into a Microservices architecture in the specific setting of financial domain, typically characterized by legacy systems and batch-based processing on heterogeneous data sources.","Manuel Mazzara,Nicola Dragoni,Antonio Bucchiarone,Alberto Giaretta,Stephan T. Larsen,Schahram Dustdar",IEEE Transactions on Services Computing,2018
10.1109/access.2022.3158648,,,Accumulation and prioritization of Architectural Debt in three companies migrating to microservices,"Many companies migrate to microservices because they help deliver value to customers quickly and continuously. However, like any architectural style, microservices are prone to architectural technical debt (ATD), which can be costly if the debts are not timely identified, avoided, or removed. During the early stages of migration, microservice-specific ATDs may accumulate. For example, practitioners may decide to continue using poorly defined APIs in microservices while attempting to maintain compatibility with old functionalities. The riskiest ATDs must be prioritized. Nevertheless, there is limited research regarding the prioritization of ATDs in companies migrating to microservices. This study aims to identify, during migration, which microservice-specific ATDs occur, are the most severe, and are the most challenging to solve. In addition, we propose a way to prioritize these debts. We conducted a multiple exploratory case study of three large companies that were early in the migration process to microservices. We interviewed 47 practitioners with several roles to identify the debts in their contexts.We report the ATDs detected during migration, the ATDs that practitioners estimate to occur in the future, and the ATDs that practitioners report as difficult to solve. We discuss the results in the context of the companies involved in this study. In addition, we used a risk assessment approach to propose a way for prioritizing ATDs. Practitioners from other organizations and researchers may use this approach to provide rankings to help identify and prioritize which ATDs should be avoided or solved in their contexts.","Saulo S. De Toledo,Antonio Martini,Phu H. Nguyen,Dag I. K. Sjoberg",IEEE Access,2022
10.1109/icse-seip55303.2022.9793911,,,Decision Models for Selecting Patterns and Strategies in Microservices Systems and their Evaluation by Practitioners,"Researchers and practitioners have recently proposed many Mi-croservices Architecture (MSA) patterns and strategies covering various aspects of microservices system life cycle, such as service design and security. However, selecting and implementing these patterns and strategies can entail various challenges for microser-vices practitioners. To this end, this study proposes decision models for selecting patterns and strategies covering four MSA design ar-eas: application decomposition into microservices, microservices security, microservices communication, and service discovery. We used peer-reviewed and grey literature to identify the patterns, strategies, and quality attributes for creating these decision models. To evaluate the familiarity, understandability, completeness, and usefulness of the decision models, we conducted semi-structured interviews with 24 microservices practitioners from 12 countries across five continents. Our evaluation results show that the prac-titioners found the decision models as an effective guide to select microservices patterns and strategies.","Muhammad Waseem,Peng Liang,Aakash Ahmad,Mojtaba Shahin,Arif Ali Khan,Gaston Marquez",,
10.1002/cae.22586,,,A systematic mapping study: The new age of software architecture from monolithic to microservice architecture—awareness and challenges,,"Abdul Razzaq,Shahbaz A. K. Ghayyur",Computer Applications in Engineering Education,2022
10.1109/icsa-c54293.2022.00028,,,Automated Microservice Decomposition Method as Multi-Objective Optimization,"IT architects expend a great deal of effort to manually decompose a current system into microservices (MSD) to improve the system maintainability. There are several methods that decompose the current system by automatically generating MSD candidates (MSDCs). These MSDCs are evaluated by de-fined evaluation functions, and the weighted sum of the evaluation is used to determine the best MSDC. However, it is difficult for IT architects to define the weighting on the spot. In this research, we propose an automated MSD method to generate a number of MSDCs by executing MSD as a multi-objective optimization problem. In the proposed method, a sufficient number of MSDCs is generated without weighting by using predefined MSD policies and fix operations. The generated MSDCs are mapped to a vector space that consists of basis vectors formulated in accordance with the evaluation functions defined by the MSD policies. Pareto-optimal solutions are then extracted from the mapped MSDCs by using a non-dominated sorting algorithm. We also extract MSDCs that are closest to the reference lines, which are defined to divide the vector space evenly, as distinctive MSDCs. We applied our method to two cases and found that it can automatically generate a sufficient number of distinctive MSDCs, thus enabling IT architects to efficiently find the best MSDC and rapidly execute MSD.","Takahiro Kinoshita,Hideyuki Kanuka",,2022
10.1109/icsa53651.2022.00015,,,Designing Microservice Systems Using Patterns: An Empirical Study on Quality Trade-Offs,"The promise of increased agility, autonomy, scalability, and reusability has made the microservices architecture a de facto standard for the development of large-scale and cloud-native commercial applications. Software patterns are an important design tool, and often they are selected and combined with the goal of obtaining a set of desired quality attributes. However, from a research standpoint, many patterns have not been widely validated against industry practice, making them not much more than interesting theories. To address this, we investigated how practitioners perceive the impact of 14 patterns on 7 quality attributes. Hence, we conducted 9 semi-structured interviews to collect industry expertise regarding (1) knowledge and adoption of software patterns, (2) the perceived architectural trade-offs of patterns, and (3) metrics professionals use to measure quality attributes. We found that many of the trade-offs reported in our study matched the documentation of each respective pattern, and identified several gains and pains which have not yet been reported, leading to novel insight about microservice patterns.","Guilherme Vale,Filipe Figueiredo Correia,Eduardo Martins Guerra,Thatiane de Oliveira Rosa,Jonas Fritzsch,Justus Bogner",,2022
10.1109/estream.2019.8732170,,,Migrating Legacy Software to Microservices Architecture,"As a legacy monolithic software become too large to deal with, many enterprises are drawn to breaking them down into the microservices architectural style. Migrating a monolithic architecture to an ecosystem of microservices is an epic journey. Each legacy monolithic application is unique and migration to microservices creates different challenges. This article elaborates on challenges and technics of legacy software migration from monolithic architecture to microservice architecture. Different migration methods and techniques are reviewed, and their benefits and drawbacks are analyzed. Microservices is a relatively new architectural style and legacy monoliths are very different in many aspects. Existing migration techniques and methods do not cover every use case.","Justas Kazanavicius,Dalius Mazeika",,2019
10.1007/978-3-031-15191-0_33,,,Microservices: Investigating Underpinnings,"AbstractThe microservices architecture style (MSA) as a new computing paradigm has gained momentum in the software engineering industry. Microservices break down traditional monolithic applications into a set of fine-grained services that can be developed, tested, and deployed independently. The primary benefit of this strategy is that it promises a shorter time to market for new capabilities as a result of better technology choices and lower team sizes. To learn more about the microservices approach, we begin our research by examining the MSA’s underpinnings. Then, we define the MSA design patterns that are utilized to tackle typical DevOps difficulties. Finally, we discuss some of the motives for early microservices adopters and some of the challenges associated with its use.KeywordsMicroservicesSoftware architectureDevOpsCloud computing","Idris Oumoussa,Soufiane Faieq,Rajaa Saidi",Lecture notes on data engineering and communications technologies,2022
10.1109/ics51289.2020.00107,,,Microservice Migration Using Strangler Fig Pattern: A Case Study on the Green Button System,"Microservice is a software architecture style which is adopted widely and rapidly in recent years. An application of microservice architecture (MSA) consists of multiple small microservices. Each microservice is autonomous, as well as easy to scale up, test, and maintain. Nowadays, many enterprises choose to replace existing monolithic architecture with MSA to enhance software quality. Accordingly, the microservice migration has become a hot topic of practical research. However, a complete and systematic microservice migration process is still lacking. Therefore, we propose a microservice migration approach based on the Strangler Fig pattern and Domain-Driven Design (DDD) to provide a complete architecture migration process and involving methods. Besides, we applied the proposed approach in an existing monolithic application, the DataCustodian system of the Green Button project. In the case study, appropriate microservices were successfully identified and established using the Strangler Fig pattern. We also conducted quantitative experiments to evaluate the performance of both new microservices and unmigrated modules during the architecture migration.","Chia-Yu Li,Shang-Pin Ma,Shang-Pin Ma,Tsung-Wen Lu",,2020
10.1109/msr.2019.00051,,,We need to talk about microservices: an analysis from the discussions on StackOverflow,"Microservices are a new and rapidly growing architectural model aimed at developing highly scalable software solutions based on independently deployable and evolvable components. Due to its novelty, microservice-related discussions are increasing in Q&A websites, such as StackOverflow (SO). In order to understand what is being discussed by the microservice community, this work has applied mining techniques and topic modelling to a manually-curated dataset of 1,043 microservice-related posts from StackOverflow. As a result, we found that 13.68% of microservice technical posts on SO discuss a single technology: Netflix Eureka. Moreover, buzzwords in the microservice ecosystem, e.g., blue/green deployment, were not identified as relevant subjects of discussion on SO. Finally, we show how a high discussion rate on SO may not reflect the popularity of a certain subject within the microservice community.","Alan Bandeira,Carlos Alberto Medeiros,Matheus Paixao,Paulo Henrique M. Maia",,2019
10.1109/tse.2018.2887384,,,"Fault Analysis and Debugging of Microservice Systems: Industrial Survey, Benchmark System, and Empirical Study","The complexity and dynamism of microservice systems pose unique challenges to a variety of software engineering tasks such as fault analysis and debugging. In spite of the prevalence and importance of microservices in industry, there is limited research on the fault analysis and debugging of microservice systems. To fill this gap, we conduct an industrial survey to learn typical faults of microservice systems, current practice of debugging, and the challenges faced by developers in practice. We then develop a medium-size benchmark microservice system (being the largest and most complex open source microservice system within our knowledge) and replicate 22 industrial fault cases on it. Based on the benchmark system and the replicated fault cases, we conduct an empirical study to investigate the effectiveness of existing industrial debugging practices and whether they can be further improved by introducing the state-of-the-art tracing and visualization techniques for distributed systems. The results show that the current industrial practices of microservice debugging can be improved by employing proper tracing and visualization techniques and strategies. Our findings also suggest that there is a strong need for more intelligent trace analysis and visualization, e.g., by combining trace visualization and improved fault localization, and employing data-driven and learning-based recommendation for guided visual exploration and comparison of traces.","Xiang Zhou,Xin Peng,Tao Xie,Jun Sun,Chao Ji,Wenhai Li,Dan Ding",IEEE Transactions on Software Engineering,2018
10.1109/saner56733.2023.00084,,,ΜDetector: Automated Intrusion Detection for Microservices,"The recent adoption of microservice-based applications divides an application into small independent services that communicate using lightweight mechanisms, improving flexibility and scalability in dynamic DevOps environments that leverage containers and orchestration tools such as Kubernetes. However, this growing popularity raises concerns related to their dependability and security, aggravated by several attacks and the lack of intrusion detection tools that target microservices. Thus, developing solutions that can be deployed in real-world scenarios and whose purpose is to keep applications and businesses secure is of the utmost importance. This paper presents µDetector, an intrusion detection tool for microservice-based applications. This tool uses intrusion detection techniques from previous research and automates their functioning for Kubernetes and KubeEdge deployments. The user provides a configuration file and the tool uses monitoring agents to collect system calls from the containers and transfers them over to the IDS module that performs anomaly-based intrusion detection. Anomalous activity will trigger alarms indicating a possible intrusion. The user can interact with the tool and its monitoring capabilities through a command-line interface or a web dashboard. µDetector was validated using functional testing and performance and scalability tests. Results show that µDetector performs well and does not impact the proper functioning of the microservices: in scenarios with over 100 000 system calls being collected per second, the CPU and memory usage of the worker nodes did not exceed 10% of the total resources available.The source code repository can be accessed here: https://github.com/micro-sec/detector.","José Flora,Miguel Teixeira,Nuno Antunes","IEEE International Conference on Software Analysis, Evolution, and Reengineering",2023
10.1109/access.2023.3236165,,,Visualizing Anti-Patterns in Microservices at Runtime: A Systematic Mapping Study,"In the world of microservices, companies must be able to create systems that operate in the most efficient way. To achieve this, anti-patterns must be avoided because of their detriment to the quality of the system. Some of the most troubling anti-patterns are hard to detect because of their appearance at runtime. Effectively removing anti-patterns from a system requires dynamic analysis because of the large size of microservice-based systems. While the detection of anti-patterns is helpful, being able to visualize them offers a great benefit to companies working with microservices. Seeing how the overall system is flowing and recognizing the existence of anti-patterns can help improve microservice-based systems. In this paper, a systematic mapping study was performed to find the current state of research on visualizing anti-patterns in microservices from the dynamic perspective. Several hundred papers were examined and a total of 31 were found to be relevant to the research topic. The papers, when analyzed, revealed that there are mechanisms to detect anti-patterns at runtime in microservices, and there are also mechanisms for visualizing the architecture of a microservice-based system. This study’s findings could help to identify and remove anti-patterns that occur during runtime in microservices, as well as a means of visualizing these anti-patterns.","Garrett Parker,Samuel Kim,A. Maruf,T. Cerný,Karel Frajták,Pavel Tisnovsky,D. Taibi",IEEE Access,2023
10.1109/tse.2023.3287297,,,Decomposition of Monolith Applications Into Microservices Architectures: A Systematic Review,"Microservices architecture has gained significant traction, in part owing to its potential to deliver scalable, robust, agile, and failure-resilient software products. Consequently, many companies that use large and complex software systems are actively looking for automated solutions to decompose their monolith applications into microservices. This paper rigorously examines 35 research papers selected from well-known databases using a Systematic Literature Review (SLR) protocol and snowballing method, extracting data to answer the research questions, and presents the following four contributions. First, the Monolith to Microservices Decomposition Framework (M2MDF) which identifies the major phases and key elements of decomposition. Second, a detailed analysis of existing decomposition approaches, tools and methods. Third, we identify the metrics and datasets used to evaluate and validate monolith to microservice decomposition processes. Fourth, we propose areas for future research. Overall, the findings suggest that monolith decomposition into microservices remains at an early stage and there is an absence of methods for combining static, dynamic, and evolutionary data. Insufficient tool support is also in evidence. Furthermore, standardised metrics, datasets, and baselines have yet to be established. These findings can assist practitioners seeking to understand the various dimensions of monolith decomposition and the community's current capabilities in that endeavour. The findings are also of value to researchers looking to identify areas to further extend research in the monolith decomposition space.","Yalemisew M. Abgaz,A. Mccarren,Peter Elger,D. Solan,Neil Lapuz,Marin Bivol,Glenn Jackson,Murat Yilmaz,J. Buckley,Paul M. Clarke",IEEE Transactions on Software Engineering,2023
10.1109/icai52893.2021.9639494,,,A Hot Decomposition Procedure: Operational Monolith System to Microservices,"In the context of the popular microservice architecture we make a brief overview of the software architectures evolution starting as a monolith. We have investigated the decomposition templates for database and business functionalities and then proposed an exemplary procedure for decomposition of monolithic applications that are in operation. The procedure aims to make the transition to microservices gradually without downtime. A proof of concept application is initially implemented as monolithic, and decomposed consequently to microservices.","Nikolay Ivanov,Antoniya Tasheva",International Conference on Applied Informatics,2021
,,2203.13878,Evaluation of the impacts of decomposing a monolithic application into microservices: A case study,"Monolithic applications are being decomposed to a microservices architecture, aiming to improve maintainability, performance and modularization. Although such decompositions have now been widely carried out in the industry, little is reported in the literature about the impacts of these decompositions. This work, therefore, reports a case study carried out to investigate the impacts of the decomposition of a real industry application for microservices architecture. The target application of the study refers to a raid operation, performed by a financial institution, which was extracted from a monolithic application to an application based on microservices. In particular, metrics were applied to monolithic and microservice-based applications, aiming to quantify coupling, cohesion, CPU consumption and memory consumption. The results obtained show that the microservices architecture generated better results for the software modularity metrics, in addition to lower memory and CPU consumption. Finally, this work brings insight and points out challenges and future directions of research that need to be explored by academia and industry.","Tulio Ricardo Hoppen Barzotto,Kleinner Farias",,2022
,,,Mono2Micro-From a Monolith to Microservices: Metrics Refinement,"The microservices architecture has become mainstream for the development of business applications because it supports the adaptation of scalability to the type of demand, but, most importantly, allows a faster development because it fosters an agile development process based on small teams focused on the product. Consequently, a trend in migrating the existing monolith systems to a microservices architecture was born. Current approaches to the identification of candidate microservices in a monolith neglect the cost of redesigning the monolith functionality due to the impact of the CAP theorem. In this thesis we propose a redesign process, guided by a set of complexity metrics, that allows the software architect to analyse and redesign the monolith functionality given a candidate decomposition. We address two new research questions: (1) What set of operations can be provided to the architect such that the functionalities can be redesigned by applying microservices pattern? (2) Is it possible to refine the complexity value associated with the monolith migration when there is additional information about the functionalities redesign? Regarding the first question we propose a set of operations that the architect can use in the redesign process. To answer the second question we define new metrics that provide a more precise value on the cost of the migration. Both questions are evaluated in the context of candidate decompositions of two monolith systems, LdoD e Blended Workflow.",João Almeida,,2021
10.12694/scpe.v22i1.1836,,,A Microservice Decomposition Method Through Using Distributed Representation of Source Code,"This research proposed a novel decomposition method for refactoring monolithic applications into microservices applications using a neural network model (code2vec) for creating code embeddings from the monolithic application source code. As a Result, semantically similar code embeddings are clustered through a hierarchical clustering algorithm to produce microservices candidates to resemble the domain model more efficiently. The quality characteristics of the results were measured using two metrics for measuring cohesion. These metrics were Cohesion at Message Level (CHM) and Cohesion at Domain Level (CHD). Also, four applications were used as test cases with different sizes ranging from small to big applications. The proposed method showed promising results in terms of cohesion when compared to other decomposition methods. The proposed method scored better scores in 5 out of 8 tests compared to other methods. Also, averaged CHD and CHM results were 0.52 and 0.76, respectively, for the proposed method, better results when compared to the other methods.","Omar Al-Debagy,Peter Martinek",Scalable Computing: Practice and Experience,2021
10.1109/icter51097.2020.9325443,,,Transforming Monolithic Systems to Microservices - An Analysis Toolkit for Legacy Code Evaluation,"Microservices has become one of the mainstream approaches for system architecture; industry accept the importance of migrating existing monolithic systems into microservices-based architecture to gain benefits. Often it is a challenging task to achieve as the monolithic systems are tightly coupled from their implementation perspectives. To migrate existing monolithic systems, it may require the architecture diagrams, system artefacts and people who know the system well etc. yet not all the time we find these resources. With suitable tool support, we can get insight into the possible services which can be found in the existing monolithic system at code level without worrying about the existence of architecture diagrams, experts etc. It allows us to make efficient decisions on what to move as microservices from the monolithic system. This research introduced a toolkit to analyse monolithic systems and propose the best ways to decompose the functionality into a set of microservices. The evaluation shows accurate revamping of the system architecture with suitable microservices suite.","Chamika Bandara,Indika Perera",International Conference on Advances in ICT for Emerging Regions,2020
10.1007/978-3-030-49435-3_1,,,Remodularization Analysis for Microservice Discovery Using Syntactic and Semantic Clustering,"This paper addresses the challenge of automated remodularization of large systems as microservices. It focuses on the analysis of enterprise systems, which are widely used in corporate sectors and are notoriously large, monolithic and challenging to manually decouple because they manage asynchronous, user-driven business processes and business objects (BOs) having complex structural relationships. The technique presented leverages semantic knowledge of enterprise systems, i.e., BO structure, together with syntactic knowledge of the code, i.e., classes and interactions as part of static profiling and clustering. On a semantic level, BOs derived from databases form the basis for prospective clustering of classes as modules, while on a syntactic level, structural and interaction details of classes provide further insights for module dependencies and clustering, based on K-Means clustering and optimization. Our integrated techniques are validated using two open source enterprise customer relationship management systems, SugarCRM and ChurchCRM. The results demonstrate improved feasibility of remodularizing enterprise systems (inclusive of coded BOs and classes) as microservices. Furthermore, the recommended microservices, integrated with ‘backend’ enterprise systems, demonstrate improvements in key non-functional characteristics, namely high execution efficiency, scalability and availability.","Adambarage Anuruddha Chathuranga De Alwis,Alistair Barros,Colin J. Fidge,Artem Polyvyanyy",International Conference on Advanced Information Systems Engineering,2020
10.1609/aaai.v35i1.16079,,2102.03827,Graph Neural Network to Dilute Outliers for Refactoring Monolith Application,"Microservices are becoming the defacto design choice for software architecture. It involves partitioning the software components into finer modules such that the development can happen independently. It also provides natural benefits when deployed on the cloud since resources can be allocated dynamically to necessary components based on demand. Therefore, enterprises as part of their journey to cloud, are increasingly looking to refactor their monolith application into one or more candidate microservices; wherein each service contains a group of software entities (e.g., classes) that are responsible for a common functionality. Graphs are a natural choice to represent a software system. Each software entity can be represented as nodes and its dependencies with other entities as links. Therefore, this problem of refactoring can be viewed as a graph based clustering task. In this work, we propose a novel method to adapt the recent advancements in graph neural networks in the context of code to better understand the software and apply them in the clustering task. In that process, we also identify the outliers in the graph which can be directly mapped to top refactor candidates in the software. Our solution is able to improve state-of-the-art performance compared to works from both software engineering and existing graph representation based techniques.","Utkarsh Desai,S. Bandyopadhyay,Srikanth G. Tamilselvam",AAAI Conference on Artificial Intelligence,2021
10.1007/s42979-020-00359-w,,,A Systematic Review on Software Architectures for IoT Systems and Future Direction to the Adoption of Microservices Architecture,"The Internet of Things-based systems and software allow computations anywhere at any time by interconnecting individuals, networks, services, computers and artefacts that allow autonomous systems to form digitized communities. As the blueprint for software-intensive applications, andsoftware architecture thatprecise the complexity of a network’s planning, development, and changing phases to effectively and efficiently build complex IoT-driven applications. In any case, there exists no comprehensive analysis in the state of the research on the adoption of MSA for IoT systems. This study effort is needed to explore architectural concepts and practices for designing and developing IoT software to excel state-of-the-art for IoTs along with suggestions and recommendations for IoT software tothe adoption of MSA to fulfil the identified gaps. A systematic analysis was coordinated, covering up the literature on existing IoT solutions by studying 140 qualitatively selected articles performed between 2005 and Jan 2020. One hundred forty articles were comprised in this SLR. The findings of this study demonstrated different research topics including software architectural styles, patterns, and models to build IoT software. This research presents cloud-based computing environments, autonomous, software-defined networking, and responsive applications, and IoT-driven agent-based systems, (1) thirteen MSA architectural and design patterns for IoTs and classification of patterns, (2) classification of software architectures for IoTs into nine main categories and their sub-categories, (3) twenty-three most investigated IoT challenges, and (4) mapping of IoT challenges with software architectural solutions. The study revealed the innovative work on IoT software architecture and trends that help in the creation and dynamic adaptation of IoT software for reusability, automation and human decision-making. The outputs of this SLR are useful in revealing many recommendations to the software industry, software engineering community, and computer sciences community with over the past 15years of research into the adoption of MSA. This study reflects a distilled awareness of architectural practices and principles to assist researchers and practitioners in promoting information sharing software architectural roles and responsibilities for the Internet of Things software.","Abdul Razzaq,Abdul Razzaq",SN Computer Science,2020
10.1007/978-3-319-39696-5_27,,,Keep Calm and Wait for the Spike! Insights on the Evolution of Amazon Services,"Web services are black box dependency magnets. Hence, studying how they evolve is both important and challenging. In this paper, we focus on one of the most successful stories of the service-oriented paradigm in industry, i.e., the Amazon services. We perform a principled empirical study, that detects evolution patterns and regularities, based on Lehman’s laws of software evolution. Our findings indicate that service evolution comes with spikes of change, followed by calm periods where the service is internally enhanced. Although spikes come with unpredictable volume, developers can count in the near certainty of the calm periods following them to allow their absorption. As deletions rarely occur, both the complexity and the exported functionality of a service increase over time (in fact, predictably). Based on the above findings, we provide recommendations that can be used by the developers of Web service applications for service selection and application maintenance.","Apostolos Zarras,Panos Vassiliadis,Ioannis Dinos",International Conference on Advanced Information Systems Engineering,2016
10.1007/978-1-4842-4476-0_2,,,Developing Microservices with Java,"Most development happening today is through microservices architecture. In the microservices architectural approach, an application is developed through a bunch of small modular services. Each of these services run as a separate process and communicates with others via different patterns. This is not a new invention and we have seen it already with different nomenclature, for example, with SOA and MOM. When many of the web giants—including Amazon, Netflix, Twitter, and PayPal—successfully adopted the microservice architecture, it started gaining popularity.",Raj Malhotra,Rapid Java Persistence and Microservices,2019
10.3390/app12115507,,,Challenges and Solution Directions of Microservice Architectures: A Systematic Literature Review,"Microservice architecture (MSA) is an architectural style for distributed software systems, which promotes the use of fine-grained services with their own lifecycles. Several benefits of MSA have been reported in the literature, including increased modularity, flexible configuration, easier development, easier maintenance, and increased productivity. On the other hand, the adoption of MSA for a specific software system is not trivial and a number of challenges have been reported in the literature. These challenges should be evaluated carefully concerning project requirements before successful MSA adoption. Unfortunately, there has been no attempt to systematically review and categorize these challenges and the potential solution directions. This article aims at identifying the state of the art of MSA and describing the challenges in applying MSA together with the identified solution directions. A systematic literature review (SLR) is performed using the published literature since the introduction of MSA in 2014. Overall, 3842 papers were discovered using a well-planned review protocol, and 85 of them were selected as primary studies and analyzed regarding research questions. Nine basic categories of challenges were identified and detailed into 40 sub-categories, for which potential solution directions were explored. MSA seems feasible, but the identified challenges could impede the expected benefits when not taken into account. This study identifies and synthesizes the reported challenges and solution directions, but further research on these directions is needed to leverage the successful MSA adoption.","Mehmet Söylemez,Bedir Tekinerdogan,Ayça Kolukısa Kolukısa Tarhan",Applied sciences,2022
10.1016/j.jss.2016.02.003,,,Revisiting software ecosystems Research,"We review the literature of software ecosystems up to date consisted of 231 papers.Identify a field rapidly evolving and growing both in volume and empirical focus.We note signs of field maturity in the evolution of the field.Identify issues inhibiting the field evolution and propose means of addressing them.Propose the update of the definition of software ecosystems. 'Software ecosystems' is argued to first appear as a concept more than 10 years ago and software ecosystem research started to take off in 2010. We conduct a systematic literature study, based on the most extensive literature review in the field up to date, with two primarily aims: (a) to provide an updated overview of the field and (b) to document evolution in the field.In total, we analyze 231 papers from 2007 until 2014 and provide an overview of the research in software ecosystems. Our analysis reveals a field that is rapidly growing, both in volume and empirical focus, while becoming more mature. We identify signs of field maturity from the increase in: (i) the number of journal articles, (ii) the empirical models within the last two years, and (iii) the number of ecosystems studied. However, we note that the field is far from mature and identify a set of challenges that are preventing the field from evolving. We propose means for future research and the community to address them.Finally, our analysis shapes the view of the field having evolved outside the existing definitions of software ecosystems and thus propose the update of the definition of software ecosystems.",Konstantinos Manikas,Journal of Systems and Software,2016
10.1145/3530019.3530040,,2206.07010,A Hierarchical DBSCAN Method for Extracting Microservices from Monolithic Applications,"The microservices architectural style offers many advantages such as scalability, reusability and ease of maintainability. As such microservices has become a common architectural choice when developing new applications. Hence, to benefit from these advantages, monolithic applications need to be redesigned in order to migrate to a microservice based architecture. Due to the inherent complexity and high costs related to this process, it is crucial to automate this task. In this paper, we propose a method that can identify potential microservices from a given monolithic application. Our method takes as input the source code of the source application in order to measure the similarities and dependencies between all of the classes in the system using their interactions and the domain terminology employed within the code. These similarity values are then used with a variant of a density-based clustering algorithm to generate a hierarchical structure of the recommended microservices while identifying potential outlier classes. We provide an empirical evaluation of our approach through different experimental settings including a comparison with existing human-designed microservices and a comparison with 5 baselines. The results show that our method succeeds in generating microservices that are overall more cohesive and that have fewer interactions in-between them with up to 0.9 of precision score when compared to human-designed microservices.","Khaled Sellami,Mohamed Aymen Saied,Ali Ouni",International Conference on Evaluation & Assessment in Software Engineering,2022
,,,"Building microservices - designing fine-grained systems, 1st Edition",,S. Newman,,2015
10.1016/j.jss.2012.12.026,,,Software ecosystems - A systematic literature review,"A software ecosystem is the interaction of a set of actors on top of a common technological platform that results in a number of software solutions or services. Arguably, software ecosystems are gaining importance with the advent of, e.g., the Google Android, Apache, and Salesforce.com ecosystems. However, there exists no systematic overview of the research done on software ecosystems from a software engineering perspective. We performed a systematic literature review of software ecosystem research, analyzing 90 papers on the subject taken from a gross collection of 420. Our main conclusions are that while research on software ecosystems is increasing (a) there is little consensus on what constitutes a software ecosystem, (b) few analytical models of software ecosystems exist, and (c) little research is done in the context of real-world ecosystems. This work provides an overview of the field, while identifying areas for future research.","Konstantinos Manikas,Klaus Marius Hansen",Journal of Systems and Software,2013
10.1109/icebe.2018.00046,,,Scenario-Based Microservice Retrieval Using Word2Vec,"Microservice architecture (MSA) is an emerging software architectural style, which differs fundamentally from the monolithic, layered architecture. During the development and maintenance of microservice systems, how to provide an effective service retrieval mechanism is a critical challenge to avoid the problems of rework and duplicate code. Meanwhile, nowadays, using the BDD (Behavior-Driven Development) method to develop microservices becomes more and more popular due to its agility and domain-driven characteristics. BDD is an agile software development approach emphasizing that test cases are written in a common language to include scenarios that describe the features of a target system. In this paper, we propose an approach, referred to as SMSR (Scenario-based MicroService Retrieval), to recommend appropriate microservices to users based on the user-written BDD test scenarios. The proposed service retrieval algorithm is based on word2vec, a widely-used machine learning method in NLP (Natural Language Processing), to perform service filtering and service similarity calculation. Experiment results show that SMSR is able to effectively retrieve appropriate microservices from the service repository.","Shang-Pin Ma,Yen Chuang,Ci-Wei Lan,Hsi-Min Chen,Chun-Ying Huang,Chia-Yu Li",IEEE International Conference on e-Business Engineering,2018
,,,Re-architecting OO Software into Microservices,". Due to its tremendous advantages, microservice architectural style has become an essential element for the development of applications deployed on the cloud and for those adopting the DevOps practices. Migrating existing applications to microservices allow them to beneﬁt from these advantages. Thus, in this paper, we propose an approach to automatically identify microservices from OO source code. The approach is based on a quality function that measures both the structural and behavioral validity of microservices and their data autonomy. Unlike existing works, ours is based on a well-deﬁned function measuring the quality of microservices and use the source code as the main source of information.","A. Seriai,Hinde-Lilia Bouziane,C. Dony,Rahina Oumarou Mahamane",,2021
10.32604/cmc.2021.018809,,,Intelligent Microservice Based on Blockchain for Healthcare Applications,"Nowadays, the blockchain, Internet of Things, and artificial intelligence technology revolutionize the traditional way of data mining with the enhanced data preprocessing, and analytics approaches, including improved service platforms. Nevertheless, one of the main challenges is designing a combined approach that provides the analytics functionality for diverse data and sustains IoT applications with robust and modular blockchain-enabled services in a diverse environment. Improved data analytics model not only provides support insights in IoT data but also fosters process productivity. Designing a robust IoT-based secure analytic model is challenging for several purposes, such as data from diverse sources, increasing data size, and monolithic service designing techniques. This article proposed an intelligent blockchain-enabled microservice to support predictive analytics for personalized fitness data in an IoT environment. The designed system support microservice-based analytic functionalities to provide secure and reliable services for IoT. To demonstrate the proposed model effectiveness, we have used the IoT fitness application as a case study. Based on the designed predictive analytic model, a recommendation model is developed to recommend daily and weekly diet and workout plans for improved body fitness. Moreover, the recommendation model objective is to help trainers make future health decisions of trainees in terms of workout and diet plan. Finally, the proposed model is evaluated using Hyperledger Caliper in terms of latency, throughput, and resource utilization with varying peers and orderer nodes. The experimental result shows that the proposed model is applicable for diverse resource-constrained blockchain-enabled IoT applications and extensible for several IoT scenarios.","Faisal Jamil,Faiza Qayyum,Soha Alhelaly,Farjeel Javed,Ammar Muthanna","Computers, materials & continua",
10.1007/978-3-319-44482-6_12,,,Service Cutter: A Systematic Approach to Service Decomposition,"Decomposing a software system into smaller parts always has been a challenge in software engineering. It is particularly important to split distributed systems into loosely coupled and highly cohesive units. Service-oriented architectures and their microservices deployments tackle many related problems, but remain vague on how to cut a system into discrete, autonomous, network-accessible services. In this paper, we propose a structured, repeatable approach to service decomposition based on 16 coupling criteria distilled from the literature and industry experience. These coupling criteria form the base of Service Cutter, our method and tool framework for service decomposition. In the Service Cutter approach, coupling information is extracted from software engineering artifacts such as domain models and use cases and represented as an undirected, weighted graph to find and score densely connected clusters. The resulting candidate service cuts promise to reduce coupling between and promote high cohesion within services. In our validation activities, which included prototyping, action research and case studies, we successfully decomposed two sample applications with acceptable performance; most (but not all) test scenarios resulted in appropriate service cuts. These results as well as early feedback from members of the target audience in industry and academia suggest that our coupling criteria catalog and tool-supported service decomposition approach have the potential to assist a service architect’s design decisions in a viable and practical manner.","Michael Gysel,Lukas Kölbener,Wolfgang Giersche,Olaf Zimmermann",European Conference on Service-Oriented and Cloud Computing,2016
10.1109/tse.2015.2445340,,,A Survey on Load Testing of Large-Scale Software Systems,"Many large-scale software systems must service thousands or millions of concurrent requests. These systems must be load tested to ensure that they can function correctly under load (i.e., the rate of the incoming requests). In this paper, we survey the state of load testing research and practice. We compare and contrast current techniques that are used in the three phases of a load test: (1) designing a proper load, (2) executing a load test, and (3) analyzing the results of a load test. This survey will be useful for load testing practitioners and software engineering researchers with interest in the load testing of large-scale software systems.","Zhen Ming Jiang,Ahmed E. Hassan",IEEE Transactions on Software Engineering,2015
10.4018/jwsr.2004010101,,,A Spanning Tree Based Approach to Identifying Web Services,"Web service has been envisioned as an important trend in application development and integration. It allows pre-built applications/application components wrapped as web services to interact with each other through standardized interfaces and form larger application systems. This paper describes a formal approach to web services identification, which is a critical step in designing and developing effective web services. The approach takes an analysis level object model, representing a business domain, as input and generates potential web service designs, in which the classes in the object model are grouped into appropriate web services based on static and dynamic relationships between classes. An initial hierarchical grouping of classes is derived using a maximum spanning tree algorithm. A set of managerial goals for evaluating alternative designs is derived based on business strategy of web service fabricator. Since the managerial goals are conflicting, a multi-objective genetic algorithm has been designed to search for alternative non-dominated solutions, from which a preferred solution can be selected. The approach has been implemented in a web services identification tool and used for designing web services in an auto insurance claims domain. The experts evaluated the utility of the approach.","Hemant Jain,Huimin Zhao,Nageswara Rao Chinta",International Journal of Web Services Research,2004
10.1109/access.2021.3057582,,,Systematic Approach for Generation of Feasible Deployment Alternatives for Microservices,"Microservice architectures rely on the development of modular and independent software units, which typically address a single task and communicate with other microservices via well-defined interfaces. This has several benefits such as easier maintenance and update of services. However, deploying a microservice-based application is often more complicated than a monolithic application. While a monolithic application can be deployed one at a time on a group of similar servers behind a load balancer, a microservice-based application consists of different microservices and each microservice usually has more than one runtime instance that needs to be configured and deployed. For a small number of microservices and applications, the deployment could be done manually. However, a large number of microservices are frequently observed in practice. In such cases, the deployment becomes cumbersome and error-prone and does not scale with the increased number of services. To cope with this problem, we present a systematic approach and the corresponding tool support for enabling the deployment of microservices to resources that have limited capacity. Hereby, we model and define the design space given the deployment parameters and automatically derive the feasible deployment solution. The approach is validated using a taxi-hailing system case study inspired by Uber which has spread all over the world in recent years.","Isil Karabey Aksakalli,Turgay Çelik,Ahmet Burak Can,Bedir Tekinerdogan",IEEE Access,2021
10.1007/978-3-030-94188-8_16,,,When Microservices Architecture and Blockchain Technology Meet: Challenges and Design Concepts,"Microservices Architecture Style (MSA) and Blockchain technology are rapidly gaining ground as popular research topics in computer science, capturing the interest of researchers to explore new horizons for new applications. Integrating MSA and blockchain technology is not straightforward as the MSA faces challenges of confidentiality and functional analysis in order to bring about the emergence of autonomous and strongly cohesive functional units. Due to its embedded encryption, decentralizing feature and digital signature, the latest advances in blockchain possess the potential ability to tackle MSA design challenges. There are two primary advantages of integrating blockchain with MSA: firstly, the blockchain has the ability to handle the major challenges of MSA design; and secondly, MSA assist the blockchain thrive. This paper discusses the design concepts for creating blockchain applications adopting an MSA that may assist in mitigating these challenges, and addresses pertinent topics in a setting such as Blockchain as a Service (BaaS) architecture. Further, it also covers the open issues of using blockchain in conjunction with MSA.","Idris Oumoussa,Soufiane Faieq,Rajaa Saidi",Lecture notes on data engineering and communications technologies,2022
10.1109/sose.2017.27,,,A Secure Microservice Framework for IoT,"The Internet of Things (IoT) has connected an incredible diversity of devices in novel ways, which has enabled exciting new services and opportunities. Unfortunately, IoT systems also present several important challenges to developers. This paper proposes a vision for how we may build IoT systems in the future by reconceiving IoT's fundamental unit of construction not as a ""thing"", but rather as a widely and finely distributed ""microservice"" already familiar to web service engineering circles. Since IoT systems are quite different from more established uses of microservice architectures, success of the approach depends on adaptations that enable them to met the key challenges that IoT systems present. We argue that a microservice approach to building IoT systems can combine in a mutually enforcing way with patterns for microservices, API gateways, distribution of services, uniform service discovery, containers, and access control. The approach is illustrated using two case studies of IoT systems in personal health management and connected autonomous vehicles. Our hope is that the vision of a microservices approach will help focus research that can fill in current gaps preventing more effective, interoperable, and secure IoT services and solutions in a wide variety of contexts.","Duo Lu,Dijiang Huang,Andrew Walenstein,Deep Medhi",International Symposium on Service Oriented Software Engineering,2017
10.1109/isc2.2018.8656968,,1807.07487,A Microservice-enabled Architecture for Smart Surveillance using Blockchain Technology,"While the smart surveillance system enhanced by the Internet of Things (IoT) technology becomes an essential part of Smart Cities, it also brings new concerns in security of the data. Compared to the traditional surveillance systems that is built following a monolithic architecture to carry out lower level operations, such as monitoring and recording, the modern surveillance systems are expected to support more scalable and decentralized solutions for advanced video stream analysis at the large volumes of distributed edge devices. In addition, the centralized architecture of the conventional surveillance systems is vulnerable to single point of failure and privacy breach owning to the lack of protection to the surveillance feed. This position paper introduces a novel secure smart surveillance system based on microservices architecture and blockchain technology. Encapsulating the video analysis algorithms as various independent microservices not only isolates the video feed from different sectors, but also improve the system availability and robustness by decentralizing the operations. The blockchain technology securely synchronizes the video analysis databases among microservices across surveillance domains, and provides tamper proof of data in the trustless network environment. Smart contract enabled access authorization strategy prevents any unauthorized user from accessing the microservices and offers a scalable, decentralized and fine-grained access control solution for smart surveillance systems.","Deeraj Nagothu,Ronghua Xu,Seyed Yahya Nikouei,Yu Chen,Yu Chen,Yu Chen",2018 IEEE International Smart Cities Conference (ISC2),2018
,,,Automated API Property Inference Techniques,"Frameworks and libraries offer reusable and customizable functionality through Application Programming Interfaces (APIs). Correctly using large and sophisticated APIs can represent a challenge due to hidden assumptions and requirements. Numerous approaches have been developed to infer properties of APIs, intended to guide their use by developers. With each approach come new definitions of API properties, new techniques for inferring these properties, and new ways to assess their correctness and usefulness. This paper provides a comprehensive survey of over a decade of research on automated property inference for APIs. Our survey provides a synthesis of this complex technical field along different dimensions of analysis: properties inferred, mining techniques, and empirical results. In particular, we derive a classification and organization of over 60 techniques into five different categories based on the type of API property inferred: unordered usage patterns, sequential usage patterns, behavioral specifications, migration mappings, and general information.","M. Robillard,E. Bodden,David Kawrykow,M. Mezini,Tristan Ratchford",IEEE Trans. Software Eng.,2013
